//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from /home/lenny/dev/csharp/message-generator/messages-parser/grammar/messages/CougarParser.g4 by ANTLR 4.13.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419



using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.1")]
[System.CLSCompliant(false)]
public partial class CougarParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		ENDL=1, COMMENT=2, C_COMMENT=3, WHITE_SPACE=4, HASH_MACRO=5, STRUCT=6, 
		ENUM=7, END_OF_LINE=8, CATEGORY_ATTRIBUTE=9, WABFILTER_ATTRIBUTE=10, FIELDDESC_ATTRIBUTE=11, 
		DESCRIPTION_ATTRIBUTE=12, GENERATOR_ATTRIBUTE=13, CONSUMER_ATTRIBUTE=14, 
		ALERTLEVEL_ATTRIBUTE=15, REASON_ATTRIBUTE=16, OPEN_ANG_BRACE=17, CLOSE_ANG_BRACE=18, 
		TYPE_DELIM=19, ATTRIBUTE=20, NAME_CHAR=21, NAME_START_CHAR=22, OPEN_SQUARE_BRACKET=23, 
		SHORT=24, INT=25, USHORT=26, ULONG=27, CHAR=28, BOOL=29, DWORD=30, FILETIME=31, 
		BYTE=32, FLOAT=33, DOUBLE=34, LONGLONG=35, LONG=36, STD=37, VECTOR=38, 
		STRING=39, MAP=40, NAME=41, MEMBER_NAME=42, OPEN_BRACKET=43, CLOSE_BRACKET=44, 
		MEMBER_END=45, SPACE=46, MSG_COMMENT=47, ENUM_VALUE=48, ENUM_HEX_VALUE=49, 
		ENUM_NAME_START_CHAR=50, ENUM_NAME_CHAR=51, ENUM_NAME=52, ENUM_ASSIGN=53, 
		ENUM_COMMA=54, OPEN_ENUM_BRACKET=55, CLOSE_ENUM_BRACKET=56, ENUM_SPACE=57, 
		ENUM_COMMENT=58, ATTRIBUTE_ENUM=59, CURRENCY_VALUE=60, NUMERIC_ATTR_VALUE=61, 
		ATTRIBUTE_QUOTED_VALUE=62, HASH_ATTRIBUTE_VALUE=63, QUESTION_ATTRIBUTE_VALUE=64, 
		OPERATOR_ATTRIBUTE_VALUE=65, MEMBER_REFERENCE=66, ATTRIBUTE_VALUE=67, 
		ENUM_SEPARATOR=68, ATTRIBUTE_COLON=69, ATTRIBUTE_SEPARATOR=70, ATTRIBUTE_OPEN_BRACE=71, 
		ATTRIBUTE_CLOSE_BRACE=72, PERIOD=73, ATTR_EXCLAIM=74, ATTR_SPACE=75, ATTR_END=76, 
		GHOSTHOUR=77, GHOST=78, SUBSITE=79, SITEHOUR=80, WATSITE=81, SITE=82, 
		WATHOST=83, LHOST=84, HOST=85, NSAWAB=86, WABFILTER_COLON=87, WABFILTER_PERIOD=88, 
		WABFILTER_VALUE=89, WABFILTER_SPACE=90, WABFILTER_END=91, FIELDDESC_SEPARATOR=92, 
		FIELDDESC_NUMERIC=93, FIELDDESC_HEX=94, FIELDDESC_WORD=95, FIELDDESC_EXPR=96, 
		FIELDDESC_PUNCTUATION=97, FIELDDESC_DOLLARS=98, FIELDDESC_QUOTE=99, FIELDDESC_OPEN=100, 
		FIELDDESC_CLOSE=101, FIELDDESC_SPACE=102, FIELDDESC_END=103, CATEGORY_WORD=104, 
		CATEGORY_SEPARATOR=105, CATEGORY_SPACE=106, CATEGORY_END=107, DESCRIPTION_SEPARATOR=108, 
		DESCRIPTION_COLON=109, DESCRIPTION_DASH=110, DESCRIPTION_NUMERIC=111, 
		DESCRIPTION_HEX=112, DESCRIPTION_WORD=113, DECSRIPTION_KEYWORD=114, DESCRIPTION_PUNC=115, 
		DESCRIPTION_OPEN=116, DESCRIPTION_CLOSE=117, DESCRIPTION_SPACE=118, DESCRIPTION_END=119, 
		GENERATOR_WORD=120, GENERATOR_SEPARATOR=121, GENERATOR_OPEN=122, GENERATOR_CLOSE=123, 
		GENERATOR_SPACE=124, GENERATOR_END=125, CONSUMER_WORD=126, CONSUMER_SEPARATOR=127, 
		CONSUMER_SPACE=128, CONSUMER_END=129, ALERTLEVEL_WORD=130, ALERTLEVEL_SEPARATOR=131, 
		ALERTLEVEL_SPACE=132, ALERTLEVEL_END=133, REASON_SEPARATOR=134, REASON_NUMERIC=135, 
		REASON_HEX=136, REASON_WORD=137, REASON_OPEN=138, REASON_CLOSE=139, REASON_SPACE=140, 
		REASON_END=141, ARRAY_SIZE_SPACE=142, CONST_NUMBER=143, OPERATOR=144, 
		SIZE_VALUE=145, CLOSE_SQUARE_BRACKET=146, MSG_SPACE=147, MSG_WORD=148, 
		MSG_CURRENCY_VALUE=149, MSG_NUMBER=150, MSG_PERIOD=151, MSG_OPEN_BRACE=152, 
		MSG_CLOSE_BRACE=153, MSG_COLON=154, MSG_UNKNOWN=155, MSG_END=156, ENUM_COMMENT_CONTENT=157, 
		ENUM_COMMENT_END=158, ANY_CONTENT=159, END_COMMENT=160, MACRO_WS=161, 
		MACRO_COMMENT=162, MACRO_END=163, MACRO_OPEN=164, MACRO_CLOSE=165, MACRO_OPEN_ANGLE_BRACE=166, 
		MACRO_CLOSE_ANGLE_BRACE=167, MACRO_QUOTE=168, MACRO_COMMA=169, MACRO_PLUS=170, 
		MACRO_MINUS=171, MACRO_NUMBER=172, MACRO_HEX_NUMBER=173, EQUALS=174, GREATER_THAN_EQUALS=175, 
		LESS_THAN_EQUALS=176, AND=177, OR=178, MACRO_NOT=179, INCLUDE=180, DEFINED=181, 
		DEFINE=182, IF=183, IFNDEF=184, ENDIF=185, UNDEF=186, PRAGMA=187, ONCE=188, 
		START_MACRO_NAME_CHAR=189, MACRO_NAME_CHAR=190, MACRO_NAME=191, MACRO_QUOTED_STRING=192, 
		HEADER_EXTENSION=193;
	public const int
		RULE_cougar_messages = 0, RULE_message_body = 1, RULE_message_comment = 2, 
		RULE_empty_comment = 3, RULE_enum_definition = 4, RULE_enum_name = 5, 
		RULE_enum_value_definition = 6, RULE_enum_comment = 7, RULE_enum_value_name = 8, 
		RULE_enum_value = 9, RULE_attribute_detail = 10, RULE_description_attribute = 11, 
		RULE_description_name = 12, RULE_description_data = 13, RULE_description_detail = 14, 
		RULE_description_word = 15, RULE_description_numeric = 16, RULE_description_hex = 17, 
		RULE_description_punctuation = 18, RULE_description_parens = 19, RULE_category_attribute = 20, 
		RULE_category_list = 21, RULE_category_name = 22, RULE_generator_attribute = 23, 
		RULE_generator_list = 24, RULE_generator_name = 25, RULE_generator_parens = 26, 
		RULE_consumer_attribute = 27, RULE_consumer_list = 28, RULE_consumer_name = 29, 
		RULE_alertlevel_attribute = 30, RULE_alertlevel_list = 31, RULE_alertlevel_name = 32, 
		RULE_reason_attribute = 33, RULE_reason_list = 34, RULE_reason_detail = 35, 
		RULE_reason_word = 36, RULE_reason_numeric = 37, RULE_reason_hex = 38, 
		RULE_reason_parens = 39, RULE_wabfilter_attribute = 40, RULE_wabfilter_site = 41, 
		RULE_wabfilter_subsite = 42, RULE_wabfilter_host = 43, RULE_wabfilter_lhost = 44, 
		RULE_wabfilter_ghost = 45, RULE_wabfilter_ghosthour = 46, RULE_wabfilter_sitehour = 47, 
		RULE_wabfilter_watsite = 48, RULE_wabfilter_wathost = 49, RULE_wabfilter_nsawab = 50, 
		RULE_wabfilter_member = 51, RULE_wabfilter_member_part = 52, RULE_fielddesc_attribute = 53, 
		RULE_fielddesc_name = 54, RULE_fielddesc_desc = 55, RULE_fielddesc_detail = 56, 
		RULE_fielddesc_word = 57, RULE_fielddesc_numeric = 58, RULE_fielddesc_hex = 59, 
		RULE_fielddesc_expr = 60, RULE_fielddesc_punctuation = 61, RULE_fielddesc_parens = 62, 
		RULE_fielddesc_money = 63, RULE_fielddesc_quoted_string = 64, RULE_attribute = 65, 
		RULE_member = 66, RULE_array_decl = 67, RULE_attribute_value = 68, RULE_parenthesized_value = 69, 
		RULE_currency_attribute_value = 70, RULE_numeric_attribute_value = 71, 
		RULE_attribute_enum = 72, RULE_part_attribute_value = 73, RULE_attibute_key = 74, 
		RULE_member_name = 75, RULE_vector_type = 76, RULE_string_type = 77, RULE_map_type = 78, 
		RULE_std_type = 79, RULE_type_name = 80, RULE_message_name = 81, RULE_const_value = 82, 
		RULE_const_expression = 83, RULE_expression_define = 84, RULE_expression_operator = 85, 
		RULE_const_numeric_value = 86, RULE_attribute_extension = 87, RULE_attribute_extension_content = 88, 
		RULE_attribute_extension_content_value = 89, RULE_attribute_extension_parenthesized_value = 90, 
		RULE_macro_block = 91, RULE_macro = 92, RULE_macro_define = 93, RULE_define_name = 94, 
		RULE_define_value = 95, RULE_macro_name = 96, RULE_macro_expr = 97, RULE_numeric_value = 98, 
		RULE_macro_operator = 99, RULE_hex_numeric_value = 100, RULE_macro_include = 101, 
		RULE_include_name = 102, RULE_macro_ifndef = 103, RULE_macro_if = 104, 
		RULE_macro_clause = 105, RULE_macro_test = 106, RULE_macro_endif = 107, 
		RULE_macro_pragma = 108, RULE_pragma_name = 109, RULE_pragma_type = 110, 
		RULE_quoted_string = 111;
	public static readonly string[] ruleNames = {
		"cougar_messages", "message_body", "message_comment", "empty_comment", 
		"enum_definition", "enum_name", "enum_value_definition", "enum_comment", 
		"enum_value_name", "enum_value", "attribute_detail", "description_attribute", 
		"description_name", "description_data", "description_detail", "description_word", 
		"description_numeric", "description_hex", "description_punctuation", "description_parens", 
		"category_attribute", "category_list", "category_name", "generator_attribute", 
		"generator_list", "generator_name", "generator_parens", "consumer_attribute", 
		"consumer_list", "consumer_name", "alertlevel_attribute", "alertlevel_list", 
		"alertlevel_name", "reason_attribute", "reason_list", "reason_detail", 
		"reason_word", "reason_numeric", "reason_hex", "reason_parens", "wabfilter_attribute", 
		"wabfilter_site", "wabfilter_subsite", "wabfilter_host", "wabfilter_lhost", 
		"wabfilter_ghost", "wabfilter_ghosthour", "wabfilter_sitehour", "wabfilter_watsite", 
		"wabfilter_wathost", "wabfilter_nsawab", "wabfilter_member", "wabfilter_member_part", 
		"fielddesc_attribute", "fielddesc_name", "fielddesc_desc", "fielddesc_detail", 
		"fielddesc_word", "fielddesc_numeric", "fielddesc_hex", "fielddesc_expr", 
		"fielddesc_punctuation", "fielddesc_parens", "fielddesc_money", "fielddesc_quoted_string", 
		"attribute", "member", "array_decl", "attribute_value", "parenthesized_value", 
		"currency_attribute_value", "numeric_attribute_value", "attribute_enum", 
		"part_attribute_value", "attibute_key", "member_name", "vector_type", 
		"string_type", "map_type", "std_type", "type_name", "message_name", "const_value", 
		"const_expression", "expression_define", "expression_operator", "const_numeric_value", 
		"attribute_extension", "attribute_extension_content", "attribute_extension_content_value", 
		"attribute_extension_parenthesized_value", "macro_block", "macro", "macro_define", 
		"define_name", "define_value", "macro_name", "macro_expr", "numeric_value", 
		"macro_operator", "hex_numeric_value", "macro_include", "include_name", 
		"macro_ifndef", "macro_if", "macro_clause", "macro_test", "macro_endif", 
		"macro_pragma", "pragma_name", "pragma_type", "quoted_string"
	};

	private static readonly string[] _LiteralNames = {
		null, null, null, null, null, null, "'struct'", "'enum'", null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, "';'", 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, "'*/'", null, null, null, null, null, 
		null, null, "'\"'", "','", null, null, null, null, "'=='", "'>='", "'<='", 
		"'&&'", "'||'", "'!'", null, null, null, null, null, null, null, null, 
		null, null, null, null, null, "'.h'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "ENDL", "COMMENT", "C_COMMENT", "WHITE_SPACE", "HASH_MACRO", "STRUCT", 
		"ENUM", "END_OF_LINE", "CATEGORY_ATTRIBUTE", "WABFILTER_ATTRIBUTE", "FIELDDESC_ATTRIBUTE", 
		"DESCRIPTION_ATTRIBUTE", "GENERATOR_ATTRIBUTE", "CONSUMER_ATTRIBUTE", 
		"ALERTLEVEL_ATTRIBUTE", "REASON_ATTRIBUTE", "OPEN_ANG_BRACE", "CLOSE_ANG_BRACE", 
		"TYPE_DELIM", "ATTRIBUTE", "NAME_CHAR", "NAME_START_CHAR", "OPEN_SQUARE_BRACKET", 
		"SHORT", "INT", "USHORT", "ULONG", "CHAR", "BOOL", "DWORD", "FILETIME", 
		"BYTE", "FLOAT", "DOUBLE", "LONGLONG", "LONG", "STD", "VECTOR", "STRING", 
		"MAP", "NAME", "MEMBER_NAME", "OPEN_BRACKET", "CLOSE_BRACKET", "MEMBER_END", 
		"SPACE", "MSG_COMMENT", "ENUM_VALUE", "ENUM_HEX_VALUE", "ENUM_NAME_START_CHAR", 
		"ENUM_NAME_CHAR", "ENUM_NAME", "ENUM_ASSIGN", "ENUM_COMMA", "OPEN_ENUM_BRACKET", 
		"CLOSE_ENUM_BRACKET", "ENUM_SPACE", "ENUM_COMMENT", "ATTRIBUTE_ENUM", 
		"CURRENCY_VALUE", "NUMERIC_ATTR_VALUE", "ATTRIBUTE_QUOTED_VALUE", "HASH_ATTRIBUTE_VALUE", 
		"QUESTION_ATTRIBUTE_VALUE", "OPERATOR_ATTRIBUTE_VALUE", "MEMBER_REFERENCE", 
		"ATTRIBUTE_VALUE", "ENUM_SEPARATOR", "ATTRIBUTE_COLON", "ATTRIBUTE_SEPARATOR", 
		"ATTRIBUTE_OPEN_BRACE", "ATTRIBUTE_CLOSE_BRACE", "PERIOD", "ATTR_EXCLAIM", 
		"ATTR_SPACE", "ATTR_END", "GHOSTHOUR", "GHOST", "SUBSITE", "SITEHOUR", 
		"WATSITE", "SITE", "WATHOST", "LHOST", "HOST", "NSAWAB", "WABFILTER_COLON", 
		"WABFILTER_PERIOD", "WABFILTER_VALUE", "WABFILTER_SPACE", "WABFILTER_END", 
		"FIELDDESC_SEPARATOR", "FIELDDESC_NUMERIC", "FIELDDESC_HEX", "FIELDDESC_WORD", 
		"FIELDDESC_EXPR", "FIELDDESC_PUNCTUATION", "FIELDDESC_DOLLARS", "FIELDDESC_QUOTE", 
		"FIELDDESC_OPEN", "FIELDDESC_CLOSE", "FIELDDESC_SPACE", "FIELDDESC_END", 
		"CATEGORY_WORD", "CATEGORY_SEPARATOR", "CATEGORY_SPACE", "CATEGORY_END", 
		"DESCRIPTION_SEPARATOR", "DESCRIPTION_COLON", "DESCRIPTION_DASH", "DESCRIPTION_NUMERIC", 
		"DESCRIPTION_HEX", "DESCRIPTION_WORD", "DECSRIPTION_KEYWORD", "DESCRIPTION_PUNC", 
		"DESCRIPTION_OPEN", "DESCRIPTION_CLOSE", "DESCRIPTION_SPACE", "DESCRIPTION_END", 
		"GENERATOR_WORD", "GENERATOR_SEPARATOR", "GENERATOR_OPEN", "GENERATOR_CLOSE", 
		"GENERATOR_SPACE", "GENERATOR_END", "CONSUMER_WORD", "CONSUMER_SEPARATOR", 
		"CONSUMER_SPACE", "CONSUMER_END", "ALERTLEVEL_WORD", "ALERTLEVEL_SEPARATOR", 
		"ALERTLEVEL_SPACE", "ALERTLEVEL_END", "REASON_SEPARATOR", "REASON_NUMERIC", 
		"REASON_HEX", "REASON_WORD", "REASON_OPEN", "REASON_CLOSE", "REASON_SPACE", 
		"REASON_END", "ARRAY_SIZE_SPACE", "CONST_NUMBER", "OPERATOR", "SIZE_VALUE", 
		"CLOSE_SQUARE_BRACKET", "MSG_SPACE", "MSG_WORD", "MSG_CURRENCY_VALUE", 
		"MSG_NUMBER", "MSG_PERIOD", "MSG_OPEN_BRACE", "MSG_CLOSE_BRACE", "MSG_COLON", 
		"MSG_UNKNOWN", "MSG_END", "ENUM_COMMENT_CONTENT", "ENUM_COMMENT_END", 
		"ANY_CONTENT", "END_COMMENT", "MACRO_WS", "MACRO_COMMENT", "MACRO_END", 
		"MACRO_OPEN", "MACRO_CLOSE", "MACRO_OPEN_ANGLE_BRACE", "MACRO_CLOSE_ANGLE_BRACE", 
		"MACRO_QUOTE", "MACRO_COMMA", "MACRO_PLUS", "MACRO_MINUS", "MACRO_NUMBER", 
		"MACRO_HEX_NUMBER", "EQUALS", "GREATER_THAN_EQUALS", "LESS_THAN_EQUALS", 
		"AND", "OR", "MACRO_NOT", "INCLUDE", "DEFINED", "DEFINE", "IF", "IFNDEF", 
		"ENDIF", "UNDEF", "PRAGMA", "ONCE", "START_MACRO_NAME_CHAR", "MACRO_NAME_CHAR", 
		"MACRO_NAME", "MACRO_QUOTED_STRING", "HEADER_EXTENSION"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "CougarParser.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static CougarParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public CougarParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public CougarParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class Cougar_messagesContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Macro_blockContext[] macro_block() {
			return GetRuleContexts<Macro_blockContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Macro_blockContext macro_block(int i) {
			return GetRuleContext<Macro_blockContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Message_bodyContext[] message_body() {
			return GetRuleContexts<Message_bodyContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Message_bodyContext message_body(int i) {
			return GetRuleContext<Message_bodyContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Enum_definitionContext[] enum_definition() {
			return GetRuleContexts<Enum_definitionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Enum_definitionContext enum_definition(int i) {
			return GetRuleContext<Enum_definitionContext>(i);
		}
		public Cougar_messagesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_cougar_messages; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICougarParserListener typedListener = listener as ICougarParserListener;
			if (typedListener != null) typedListener.EnterCougar_messages(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICougarParserListener typedListener = listener as ICougarParserListener;
			if (typedListener != null) typedListener.ExitCougar_messages(this);
		}
	}

	[RuleVersion(0)]
	public Cougar_messagesContext cougar_messages() {
		Cougar_messagesContext _localctx = new Cougar_messagesContext(Context, State);
		EnterRule(_localctx, 0, RULE_cougar_messages);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 229;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 224L) != 0)) {
				{
				State = 227;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case HASH_MACRO:
					{
					State = 224;
					macro_block();
					}
					break;
				case STRUCT:
					{
					State = 225;
					message_body();
					}
					break;
				case ENUM:
					{
					State = 226;
					enum_definition();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 231;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Message_bodyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRUCT() { return GetToken(CougarParser.STRUCT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Message_nameContext message_name() {
			return GetRuleContext<Message_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_BRACKET() { return GetToken(CougarParser.OPEN_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_BRACKET() { return GetToken(CougarParser.CLOSE_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END_OF_LINE() { return GetToken(CougarParser.END_OF_LINE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Message_commentContext message_comment() {
			return GetRuleContext<Message_commentContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Empty_commentContext[] empty_comment() {
			return GetRuleContexts<Empty_commentContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Empty_commentContext empty_comment(int i) {
			return GetRuleContext<Empty_commentContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AttributeContext[] attribute() {
			return GetRuleContexts<AttributeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AttributeContext attribute(int i) {
			return GetRuleContext<AttributeContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Description_attributeContext[] description_attribute() {
			return GetRuleContexts<Description_attributeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Description_attributeContext description_attribute(int i) {
			return GetRuleContext<Description_attributeContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Category_attributeContext[] category_attribute() {
			return GetRuleContexts<Category_attributeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Category_attributeContext category_attribute(int i) {
			return GetRuleContext<Category_attributeContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Generator_attributeContext[] generator_attribute() {
			return GetRuleContexts<Generator_attributeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Generator_attributeContext generator_attribute(int i) {
			return GetRuleContext<Generator_attributeContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Consumer_attributeContext[] consumer_attribute() {
			return GetRuleContexts<Consumer_attributeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Consumer_attributeContext consumer_attribute(int i) {
			return GetRuleContext<Consumer_attributeContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Alertlevel_attributeContext[] alertlevel_attribute() {
			return GetRuleContexts<Alertlevel_attributeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Alertlevel_attributeContext alertlevel_attribute(int i) {
			return GetRuleContext<Alertlevel_attributeContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Reason_attributeContext[] reason_attribute() {
			return GetRuleContexts<Reason_attributeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Reason_attributeContext reason_attribute(int i) {
			return GetRuleContext<Reason_attributeContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Wabfilter_attributeContext[] wabfilter_attribute() {
			return GetRuleContexts<Wabfilter_attributeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Wabfilter_attributeContext wabfilter_attribute(int i) {
			return GetRuleContext<Wabfilter_attributeContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Attribute_extensionContext[] attribute_extension() {
			return GetRuleContexts<Attribute_extensionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Attribute_extensionContext attribute_extension(int i) {
			return GetRuleContext<Attribute_extensionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MemberContext[] member() {
			return GetRuleContexts<MemberContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public MemberContext member(int i) {
			return GetRuleContext<MemberContext>(i);
		}
		public Message_bodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_message_body; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICougarParserListener typedListener = listener as ICougarParserListener;
			if (typedListener != null) typedListener.EnterMessage_body(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICougarParserListener typedListener = listener as ICougarParserListener;
			if (typedListener != null) typedListener.ExitMessage_body(this);
		}
	}

	[RuleVersion(0)]
	public Message_bodyContext message_body() {
		Message_bodyContext _localctx = new Message_bodyContext(Context, State);
		EnterRule(_localctx, 2, RULE_message_body);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 232;
			Match(STRUCT);
			State = 233;
			message_name();
			State = 235;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==MSG_COMMENT) {
				{
				State = 234;
				message_comment();
				}
			}

			State = 237;
			Match(OPEN_BRACKET);
			State = 241;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,3,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 238;
					empty_comment();
					}
					} 
				}
				State = 243;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,3,Context);
			}
			State = 256;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,5,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					State = 254;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,4,Context) ) {
					case 1:
						{
						State = 244;
						attribute();
						}
						break;
					case 2:
						{
						State = 245;
						description_attribute();
						}
						break;
					case 3:
						{
						State = 246;
						category_attribute();
						}
						break;
					case 4:
						{
						State = 247;
						generator_attribute();
						}
						break;
					case 5:
						{
						State = 248;
						consumer_attribute();
						}
						break;
					case 6:
						{
						State = 249;
						alertlevel_attribute();
						}
						break;
					case 7:
						{
						State = 250;
						reason_attribute();
						}
						break;
					case 8:
						{
						State = 251;
						wabfilter_attribute();
						}
						break;
					case 9:
						{
						State = 252;
						empty_comment();
						}
						break;
					case 10:
						{
						State = 253;
						attribute_extension();
						}
						break;
					}
					} 
				}
				State = 258;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,5,Context);
			}
			State = 263;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,7,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					State = 261;
					ErrorHandler.Sync(this);
					switch (TokenStream.LA(1)) {
					case SHORT:
					case INT:
					case USHORT:
					case ULONG:
					case CHAR:
					case BOOL:
					case DWORD:
					case FILETIME:
					case BYTE:
					case FLOAT:
					case DOUBLE:
					case LONGLONG:
					case LONG:
					case STD:
					case NAME:
						{
						State = 259;
						member();
						}
						break;
					case MSG_COMMENT:
						{
						State = 260;
						attribute_extension();
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					} 
				}
				State = 265;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,7,Context);
			}
			State = 269;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==MSG_COMMENT) {
				{
				{
				State = 266;
				empty_comment();
				}
				}
				State = 271;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 272;
			Match(CLOSE_BRACKET);
			State = 273;
			Match(END_OF_LINE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Message_commentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MSG_COMMENT() { return GetToken(CougarParser.MSG_COMMENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MSG_END() { return GetToken(CougarParser.MSG_END, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] MSG_WORD() { return GetTokens(CougarParser.MSG_WORD); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MSG_WORD(int i) {
			return GetToken(CougarParser.MSG_WORD, i);
		}
		public Message_commentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_message_comment; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICougarParserListener typedListener = listener as ICougarParserListener;
			if (typedListener != null) typedListener.EnterMessage_comment(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICougarParserListener typedListener = listener as ICougarParserListener;
			if (typedListener != null) typedListener.ExitMessage_comment(this);
		}
	}

	[RuleVersion(0)]
	public Message_commentContext message_comment() {
		Message_commentContext _localctx = new Message_commentContext(Context, State);
		EnterRule(_localctx, 4, RULE_message_comment);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 275;
			Match(MSG_COMMENT);
			State = 279;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==MSG_WORD) {
				{
				{
				State = 276;
				Match(MSG_WORD);
				}
				}
				State = 281;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 282;
			Match(MSG_END);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Empty_commentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MSG_COMMENT() { return GetToken(CougarParser.MSG_COMMENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MSG_END() { return GetToken(CougarParser.MSG_END, 0); }
		public Empty_commentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_empty_comment; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICougarParserListener typedListener = listener as ICougarParserListener;
			if (typedListener != null) typedListener.EnterEmpty_comment(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICougarParserListener typedListener = listener as ICougarParserListener;
			if (typedListener != null) typedListener.ExitEmpty_comment(this);
		}
	}

	[RuleVersion(0)]
	public Empty_commentContext empty_comment() {
		Empty_commentContext _localctx = new Empty_commentContext(Context, State);
		EnterRule(_localctx, 6, RULE_empty_comment);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 284;
			Match(MSG_COMMENT);
			State = 285;
			Match(MSG_END);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Enum_definitionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENUM() { return GetToken(CougarParser.ENUM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Enum_nameContext enum_name() {
			return GetRuleContext<Enum_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_ENUM_BRACKET() { return GetToken(CougarParser.OPEN_ENUM_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_ENUM_BRACKET() { return GetToken(CougarParser.CLOSE_ENUM_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END_OF_LINE() { return GetToken(CougarParser.END_OF_LINE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Enum_commentContext[] enum_comment() {
			return GetRuleContexts<Enum_commentContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Enum_commentContext enum_comment(int i) {
			return GetRuleContext<Enum_commentContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Enum_value_definitionContext[] enum_value_definition() {
			return GetRuleContexts<Enum_value_definitionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Enum_value_definitionContext enum_value_definition(int i) {
			return GetRuleContext<Enum_value_definitionContext>(i);
		}
		public Enum_definitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enum_definition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICougarParserListener typedListener = listener as ICougarParserListener;
			if (typedListener != null) typedListener.EnterEnum_definition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICougarParserListener typedListener = listener as ICougarParserListener;
			if (typedListener != null) typedListener.ExitEnum_definition(this);
		}
	}

	[RuleVersion(0)]
	public Enum_definitionContext enum_definition() {
		Enum_definitionContext _localctx = new Enum_definitionContext(Context, State);
		EnterRule(_localctx, 8, RULE_enum_definition);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 287;
			Match(ENUM);
			State = 288;
			enum_name();
			State = 290;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ENUM_COMMENT) {
				{
				State = 289;
				enum_comment();
				}
			}

			State = 292;
			Match(OPEN_ENUM_BRACKET);
			State = 295;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				State = 295;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case ENUM_COMMENT:
					{
					State = 293;
					enum_comment();
					}
					break;
				case ENUM_NAME:
					{
					State = 294;
					enum_value_definition();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 297;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==ENUM_NAME || _la==ENUM_COMMENT );
			State = 299;
			Match(CLOSE_ENUM_BRACKET);
			State = 300;
			Match(END_OF_LINE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Enum_nameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENUM_NAME() { return GetToken(CougarParser.ENUM_NAME, 0); }
		public Enum_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enum_name; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICougarParserListener typedListener = listener as ICougarParserListener;
			if (typedListener != null) typedListener.EnterEnum_name(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICougarParserListener typedListener = listener as ICougarParserListener;
			if (typedListener != null) typedListener.ExitEnum_name(this);
		}
	}

	[RuleVersion(0)]
	public Enum_nameContext enum_name() {
		Enum_nameContext _localctx = new Enum_nameContext(Context, State);
		EnterRule(_localctx, 10, RULE_enum_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 302;
			Match(ENUM_NAME);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Enum_value_definitionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Enum_value_nameContext enum_value_name() {
			return GetRuleContext<Enum_value_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENUM_ASSIGN() { return GetToken(CougarParser.ENUM_ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Enum_valueContext enum_value() {
			return GetRuleContext<Enum_valueContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENUM_COMMA() { return GetToken(CougarParser.ENUM_COMMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Enum_commentContext enum_comment() {
			return GetRuleContext<Enum_commentContext>(0);
		}
		public Enum_value_definitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enum_value_definition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICougarParserListener typedListener = listener as ICougarParserListener;
			if (typedListener != null) typedListener.EnterEnum_value_definition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICougarParserListener typedListener = listener as ICougarParserListener;
			if (typedListener != null) typedListener.ExitEnum_value_definition(this);
		}
	}

	[RuleVersion(0)]
	public Enum_value_definitionContext enum_value_definition() {
		Enum_value_definitionContext _localctx = new Enum_value_definitionContext(Context, State);
		EnterRule(_localctx, 12, RULE_enum_value_definition);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 304;
			enum_value_name();
			State = 307;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ENUM_ASSIGN) {
				{
				State = 305;
				Match(ENUM_ASSIGN);
				State = 306;
				enum_value();
				}
			}

			State = 310;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ENUM_COMMA) {
				{
				State = 309;
				Match(ENUM_COMMA);
				}
			}

			State = 313;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,15,Context) ) {
			case 1:
				{
				State = 312;
				enum_comment();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Enum_commentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENUM_COMMENT() { return GetToken(CougarParser.ENUM_COMMENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENUM_COMMENT_END() { return GetToken(CougarParser.ENUM_COMMENT_END, 0); }
		public Enum_commentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enum_comment; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICougarParserListener typedListener = listener as ICougarParserListener;
			if (typedListener != null) typedListener.EnterEnum_comment(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICougarParserListener typedListener = listener as ICougarParserListener;
			if (typedListener != null) typedListener.ExitEnum_comment(this);
		}
	}

	[RuleVersion(0)]
	public Enum_commentContext enum_comment() {
		Enum_commentContext _localctx = new Enum_commentContext(Context, State);
		EnterRule(_localctx, 14, RULE_enum_comment);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 315;
			Match(ENUM_COMMENT);
			State = 316;
			Match(ENUM_COMMENT_END);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Enum_value_nameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENUM_NAME() { return GetToken(CougarParser.ENUM_NAME, 0); }
		public Enum_value_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enum_value_name; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICougarParserListener typedListener = listener as ICougarParserListener;
			if (typedListener != null) typedListener.EnterEnum_value_name(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICougarParserListener typedListener = listener as ICougarParserListener;
			if (typedListener != null) typedListener.ExitEnum_value_name(this);
		}
	}

	[RuleVersion(0)]
	public Enum_value_nameContext enum_value_name() {
		Enum_value_nameContext _localctx = new Enum_value_nameContext(Context, State);
		EnterRule(_localctx, 16, RULE_enum_value_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 318;
			Match(ENUM_NAME);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Enum_valueContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENUM_HEX_VALUE() { return GetToken(CougarParser.ENUM_HEX_VALUE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENUM_VALUE() { return GetToken(CougarParser.ENUM_VALUE, 0); }
		public Enum_valueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enum_value; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICougarParserListener typedListener = listener as ICougarParserListener;
			if (typedListener != null) typedListener.EnterEnum_value(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICougarParserListener typedListener = listener as ICougarParserListener;
			if (typedListener != null) typedListener.ExitEnum_value(this);
		}
	}

	[RuleVersion(0)]
	public Enum_valueContext enum_value() {
		Enum_valueContext _localctx = new Enum_valueContext(Context, State);
		EnterRule(_localctx, 18, RULE_enum_value);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 320;
			_la = TokenStream.LA(1);
			if ( !(_la==ENUM_VALUE || _la==ENUM_HEX_VALUE) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Attribute_detailContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ATTR_END() { return GetToken(CougarParser.ATTR_END, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Attribute_valueContext[] attribute_value() {
			return GetRuleContexts<Attribute_valueContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Attribute_valueContext attribute_value(int i) {
			return GetRuleContext<Attribute_valueContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ATTRIBUTE_SEPARATOR() { return GetTokens(CougarParser.ATTRIBUTE_SEPARATOR); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ATTRIBUTE_SEPARATOR(int i) {
			return GetToken(CougarParser.ATTRIBUTE_SEPARATOR, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Attribute_extensionContext[] attribute_extension() {
			return GetRuleContexts<Attribute_extensionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Attribute_extensionContext attribute_extension(int i) {
			return GetRuleContext<Attribute_extensionContext>(i);
		}
		public Attribute_detailContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_attribute_detail; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICougarParserListener typedListener = listener as ICougarParserListener;
			if (typedListener != null) typedListener.EnterAttribute_detail(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICougarParserListener typedListener = listener as ICougarParserListener;
			if (typedListener != null) typedListener.ExitAttribute_detail(this);
		}
	}

	[RuleVersion(0)]
	public Attribute_detailContext attribute_detail() {
		Attribute_detailContext _localctx = new Attribute_detailContext(Context, State);
		EnterRule(_localctx, 20, RULE_attribute_detail);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 323;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (((((_la - 59)) & ~0x3f) == 0 && ((1L << (_la - 59)) & 5631L) != 0)) {
				{
				State = 322;
				attribute_value();
				}
			}

			State = 331;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==ATTRIBUTE_SEPARATOR) {
				{
				{
				State = 325;
				Match(ATTRIBUTE_SEPARATOR);
				State = 327;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (((((_la - 59)) & ~0x3f) == 0 && ((1L << (_la - 59)) & 5631L) != 0)) {
					{
					State = 326;
					attribute_value();
					}
				}

				}
				}
				State = 333;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 334;
			Match(ATTR_END);
			State = 338;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,19,Context);
			while ( _alt!=1 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1+1 ) {
					{
					{
					State = 335;
					attribute_extension();
					}
					} 
				}
				State = 340;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,19,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Description_attributeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DESCRIPTION_ATTRIBUTE() { return GetToken(CougarParser.DESCRIPTION_ATTRIBUTE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Description_nameContext description_name() {
			return GetRuleContext<Description_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DESCRIPTION_END() { return GetToken(CougarParser.DESCRIPTION_END, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DESCRIPTION_COLON() { return GetToken(CougarParser.DESCRIPTION_COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Description_detailContext[] description_detail() {
			return GetRuleContexts<Description_detailContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Description_detailContext description_detail(int i) {
			return GetRuleContext<Description_detailContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Attribute_extensionContext[] attribute_extension() {
			return GetRuleContexts<Attribute_extensionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Attribute_extensionContext attribute_extension(int i) {
			return GetRuleContext<Attribute_extensionContext>(i);
		}
		public Description_attributeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_description_attribute; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICougarParserListener typedListener = listener as ICougarParserListener;
			if (typedListener != null) typedListener.EnterDescription_attribute(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICougarParserListener typedListener = listener as ICougarParserListener;
			if (typedListener != null) typedListener.ExitDescription_attribute(this);
		}
	}

	[RuleVersion(0)]
	public Description_attributeContext description_attribute() {
		Description_attributeContext _localctx = new Description_attributeContext(Context, State);
		EnterRule(_localctx, 22, RULE_description_attribute);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 341;
			Match(DESCRIPTION_ATTRIBUTE);
			State = 342;
			description_name();
			State = 344;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==DESCRIPTION_COLON) {
				{
				State = 343;
				Match(DESCRIPTION_COLON);
				}
			}

			State = 349;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==DESCRIPTION_SEPARATOR) {
				{
				{
				State = 346;
				description_detail();
				}
				}
				State = 351;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 352;
			Match(DESCRIPTION_END);
			State = 356;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,22,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 353;
					attribute_extension();
					}
					} 
				}
				State = 358;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,22,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Description_nameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Description_wordContext[] description_word() {
			return GetRuleContexts<Description_wordContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Description_wordContext description_word(int i) {
			return GetRuleContext<Description_wordContext>(i);
		}
		public Description_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_description_name; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICougarParserListener typedListener = listener as ICougarParserListener;
			if (typedListener != null) typedListener.EnterDescription_name(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICougarParserListener typedListener = listener as ICougarParserListener;
			if (typedListener != null) typedListener.ExitDescription_name(this);
		}
	}

	[RuleVersion(0)]
	public Description_nameContext description_name() {
		Description_nameContext _localctx = new Description_nameContext(Context, State);
		EnterRule(_localctx, 24, RULE_description_name);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 362;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (((((_la - 110)) & ~0x3f) == 0 && ((1L << (_la - 110)) & 25L) != 0)) {
				{
				{
				State = 359;
				description_word();
				}
				}
				State = 364;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Description_dataContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Description_wordContext[] description_word() {
			return GetRuleContexts<Description_wordContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Description_wordContext description_word(int i) {
			return GetRuleContext<Description_wordContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Description_numericContext[] description_numeric() {
			return GetRuleContexts<Description_numericContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Description_numericContext description_numeric(int i) {
			return GetRuleContext<Description_numericContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Description_hexContext[] description_hex() {
			return GetRuleContexts<Description_hexContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Description_hexContext description_hex(int i) {
			return GetRuleContext<Description_hexContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Description_punctuationContext[] description_punctuation() {
			return GetRuleContexts<Description_punctuationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Description_punctuationContext description_punctuation(int i) {
			return GetRuleContext<Description_punctuationContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Description_parensContext[] description_parens() {
			return GetRuleContexts<Description_parensContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Description_parensContext description_parens(int i) {
			return GetRuleContext<Description_parensContext>(i);
		}
		public Description_dataContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_description_data; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICougarParserListener typedListener = listener as ICougarParserListener;
			if (typedListener != null) typedListener.EnterDescription_data(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICougarParserListener typedListener = listener as ICougarParserListener;
			if (typedListener != null) typedListener.ExitDescription_data(this);
		}
	}

	[RuleVersion(0)]
	public Description_dataContext description_data() {
		Description_dataContext _localctx = new Description_dataContext(Context, State);
		EnterRule(_localctx, 26, RULE_description_data);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 372;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (((((_la - 110)) & ~0x3f) == 0 && ((1L << (_la - 110)) & 127L) != 0)) {
				{
				State = 370;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case DESCRIPTION_DASH:
				case DESCRIPTION_WORD:
				case DECSRIPTION_KEYWORD:
					{
					State = 365;
					description_word();
					}
					break;
				case DESCRIPTION_NUMERIC:
					{
					State = 366;
					description_numeric();
					}
					break;
				case DESCRIPTION_HEX:
					{
					State = 367;
					description_hex();
					}
					break;
				case DESCRIPTION_PUNC:
					{
					State = 368;
					description_punctuation();
					}
					break;
				case DESCRIPTION_OPEN:
					{
					State = 369;
					description_parens();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 374;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Description_detailContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DESCRIPTION_SEPARATOR() { return GetToken(CougarParser.DESCRIPTION_SEPARATOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Description_dataContext description_data() {
			return GetRuleContext<Description_dataContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DESCRIPTION_DASH() { return GetToken(CougarParser.DESCRIPTION_DASH, 0); }
		public Description_detailContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_description_detail; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICougarParserListener typedListener = listener as ICougarParserListener;
			if (typedListener != null) typedListener.EnterDescription_detail(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICougarParserListener typedListener = listener as ICougarParserListener;
			if (typedListener != null) typedListener.ExitDescription_detail(this);
		}
	}

	[RuleVersion(0)]
	public Description_detailContext description_detail() {
		Description_detailContext _localctx = new Description_detailContext(Context, State);
		EnterRule(_localctx, 28, RULE_description_detail);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 375;
			Match(DESCRIPTION_SEPARATOR);
			State = 377;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,26,Context) ) {
			case 1:
				{
				State = 376;
				Match(DESCRIPTION_DASH);
				}
				break;
			}
			State = 379;
			description_data();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Description_wordContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DESCRIPTION_WORD() { return GetToken(CougarParser.DESCRIPTION_WORD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DECSRIPTION_KEYWORD() { return GetToken(CougarParser.DECSRIPTION_KEYWORD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DESCRIPTION_DASH() { return GetToken(CougarParser.DESCRIPTION_DASH, 0); }
		public Description_wordContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_description_word; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICougarParserListener typedListener = listener as ICougarParserListener;
			if (typedListener != null) typedListener.EnterDescription_word(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICougarParserListener typedListener = listener as ICougarParserListener;
			if (typedListener != null) typedListener.ExitDescription_word(this);
		}
	}

	[RuleVersion(0)]
	public Description_wordContext description_word() {
		Description_wordContext _localctx = new Description_wordContext(Context, State);
		EnterRule(_localctx, 30, RULE_description_word);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 381;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 110)) & ~0x3f) == 0 && ((1L << (_la - 110)) & 25L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Description_numericContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DESCRIPTION_NUMERIC() { return GetToken(CougarParser.DESCRIPTION_NUMERIC, 0); }
		public Description_numericContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_description_numeric; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICougarParserListener typedListener = listener as ICougarParserListener;
			if (typedListener != null) typedListener.EnterDescription_numeric(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICougarParserListener typedListener = listener as ICougarParserListener;
			if (typedListener != null) typedListener.ExitDescription_numeric(this);
		}
	}

	[RuleVersion(0)]
	public Description_numericContext description_numeric() {
		Description_numericContext _localctx = new Description_numericContext(Context, State);
		EnterRule(_localctx, 32, RULE_description_numeric);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 383;
			Match(DESCRIPTION_NUMERIC);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Description_hexContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DESCRIPTION_HEX() { return GetToken(CougarParser.DESCRIPTION_HEX, 0); }
		public Description_hexContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_description_hex; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICougarParserListener typedListener = listener as ICougarParserListener;
			if (typedListener != null) typedListener.EnterDescription_hex(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICougarParserListener typedListener = listener as ICougarParserListener;
			if (typedListener != null) typedListener.ExitDescription_hex(this);
		}
	}

	[RuleVersion(0)]
	public Description_hexContext description_hex() {
		Description_hexContext _localctx = new Description_hexContext(Context, State);
		EnterRule(_localctx, 34, RULE_description_hex);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 385;
			Match(DESCRIPTION_HEX);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Description_punctuationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DESCRIPTION_PUNC() { return GetToken(CougarParser.DESCRIPTION_PUNC, 0); }
		public Description_punctuationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_description_punctuation; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICougarParserListener typedListener = listener as ICougarParserListener;
			if (typedListener != null) typedListener.EnterDescription_punctuation(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICougarParserListener typedListener = listener as ICougarParserListener;
			if (typedListener != null) typedListener.ExitDescription_punctuation(this);
		}
	}

	[RuleVersion(0)]
	public Description_punctuationContext description_punctuation() {
		Description_punctuationContext _localctx = new Description_punctuationContext(Context, State);
		EnterRule(_localctx, 36, RULE_description_punctuation);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 387;
			Match(DESCRIPTION_PUNC);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Description_parensContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DESCRIPTION_OPEN() { return GetToken(CougarParser.DESCRIPTION_OPEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Description_dataContext description_data() {
			return GetRuleContext<Description_dataContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DESCRIPTION_CLOSE() { return GetToken(CougarParser.DESCRIPTION_CLOSE, 0); }
		public Description_parensContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_description_parens; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICougarParserListener typedListener = listener as ICougarParserListener;
			if (typedListener != null) typedListener.EnterDescription_parens(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICougarParserListener typedListener = listener as ICougarParserListener;
			if (typedListener != null) typedListener.ExitDescription_parens(this);
		}
	}

	[RuleVersion(0)]
	public Description_parensContext description_parens() {
		Description_parensContext _localctx = new Description_parensContext(Context, State);
		EnterRule(_localctx, 38, RULE_description_parens);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 389;
			Match(DESCRIPTION_OPEN);
			State = 390;
			description_data();
			State = 391;
			Match(DESCRIPTION_CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Category_attributeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CATEGORY_ATTRIBUTE() { return GetToken(CougarParser.CATEGORY_ATTRIBUTE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CATEGORY_END() { return GetToken(CougarParser.CATEGORY_END, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Category_listContext category_list() {
			return GetRuleContext<Category_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Attribute_extensionContext[] attribute_extension() {
			return GetRuleContexts<Attribute_extensionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Attribute_extensionContext attribute_extension(int i) {
			return GetRuleContext<Attribute_extensionContext>(i);
		}
		public Category_attributeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_category_attribute; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICougarParserListener typedListener = listener as ICougarParserListener;
			if (typedListener != null) typedListener.EnterCategory_attribute(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICougarParserListener typedListener = listener as ICougarParserListener;
			if (typedListener != null) typedListener.ExitCategory_attribute(this);
		}
	}

	[RuleVersion(0)]
	public Category_attributeContext category_attribute() {
		Category_attributeContext _localctx = new Category_attributeContext(Context, State);
		EnterRule(_localctx, 40, RULE_category_attribute);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 393;
			Match(CATEGORY_ATTRIBUTE);
			State = 395;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==CATEGORY_WORD) {
				{
				State = 394;
				category_list();
				}
			}

			State = 397;
			Match(CATEGORY_END);
			State = 401;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,28,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 398;
					attribute_extension();
					}
					} 
				}
				State = 403;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,28,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Category_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Category_nameContext[] category_name() {
			return GetRuleContexts<Category_nameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Category_nameContext category_name(int i) {
			return GetRuleContext<Category_nameContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] CATEGORY_SEPARATOR() { return GetTokens(CougarParser.CATEGORY_SEPARATOR); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CATEGORY_SEPARATOR(int i) {
			return GetToken(CougarParser.CATEGORY_SEPARATOR, i);
		}
		public Category_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_category_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICougarParserListener typedListener = listener as ICougarParserListener;
			if (typedListener != null) typedListener.EnterCategory_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICougarParserListener typedListener = listener as ICougarParserListener;
			if (typedListener != null) typedListener.ExitCategory_list(this);
		}
	}

	[RuleVersion(0)]
	public Category_listContext category_list() {
		Category_listContext _localctx = new Category_listContext(Context, State);
		EnterRule(_localctx, 42, RULE_category_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 404;
			category_name();
			State = 411;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==CATEGORY_WORD || _la==CATEGORY_SEPARATOR) {
				{
				{
				State = 406;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==CATEGORY_SEPARATOR) {
					{
					State = 405;
					Match(CATEGORY_SEPARATOR);
					}
				}

				State = 408;
				category_name();
				}
				}
				State = 413;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Category_nameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CATEGORY_WORD() { return GetToken(CougarParser.CATEGORY_WORD, 0); }
		public Category_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_category_name; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICougarParserListener typedListener = listener as ICougarParserListener;
			if (typedListener != null) typedListener.EnterCategory_name(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICougarParserListener typedListener = listener as ICougarParserListener;
			if (typedListener != null) typedListener.ExitCategory_name(this);
		}
	}

	[RuleVersion(0)]
	public Category_nameContext category_name() {
		Category_nameContext _localctx = new Category_nameContext(Context, State);
		EnterRule(_localctx, 44, RULE_category_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 414;
			Match(CATEGORY_WORD);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Generator_attributeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GENERATOR_ATTRIBUTE() { return GetToken(CougarParser.GENERATOR_ATTRIBUTE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GENERATOR_END() { return GetToken(CougarParser.GENERATOR_END, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Generator_listContext generator_list() {
			return GetRuleContext<Generator_listContext>(0);
		}
		public Generator_attributeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_generator_attribute; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICougarParserListener typedListener = listener as ICougarParserListener;
			if (typedListener != null) typedListener.EnterGenerator_attribute(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICougarParserListener typedListener = listener as ICougarParserListener;
			if (typedListener != null) typedListener.ExitGenerator_attribute(this);
		}
	}

	[RuleVersion(0)]
	public Generator_attributeContext generator_attribute() {
		Generator_attributeContext _localctx = new Generator_attributeContext(Context, State);
		EnterRule(_localctx, 46, RULE_generator_attribute);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 416;
			Match(GENERATOR_ATTRIBUTE);
			State = 418;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==GENERATOR_WORD) {
				{
				State = 417;
				generator_list();
				}
			}

			State = 420;
			Match(GENERATOR_END);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Generator_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Generator_nameContext[] generator_name() {
			return GetRuleContexts<Generator_nameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Generator_nameContext generator_name(int i) {
			return GetRuleContext<Generator_nameContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Generator_parensContext generator_parens() {
			return GetRuleContext<Generator_parensContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] GENERATOR_SEPARATOR() { return GetTokens(CougarParser.GENERATOR_SEPARATOR); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GENERATOR_SEPARATOR(int i) {
			return GetToken(CougarParser.GENERATOR_SEPARATOR, i);
		}
		public Generator_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_generator_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICougarParserListener typedListener = listener as ICougarParserListener;
			if (typedListener != null) typedListener.EnterGenerator_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICougarParserListener typedListener = listener as ICougarParserListener;
			if (typedListener != null) typedListener.ExitGenerator_list(this);
		}
	}

	[RuleVersion(0)]
	public Generator_listContext generator_list() {
		Generator_listContext _localctx = new Generator_listContext(Context, State);
		EnterRule(_localctx, 48, RULE_generator_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 422;
			generator_name();
			State = 424;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==GENERATOR_OPEN) {
				{
				State = 423;
				generator_parens();
				}
			}

			State = 432;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==GENERATOR_WORD || _la==GENERATOR_SEPARATOR) {
				{
				{
				State = 427;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==GENERATOR_SEPARATOR) {
					{
					State = 426;
					Match(GENERATOR_SEPARATOR);
					}
				}

				State = 429;
				generator_name();
				}
				}
				State = 434;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Generator_nameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GENERATOR_WORD() { return GetToken(CougarParser.GENERATOR_WORD, 0); }
		public Generator_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_generator_name; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICougarParserListener typedListener = listener as ICougarParserListener;
			if (typedListener != null) typedListener.EnterGenerator_name(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICougarParserListener typedListener = listener as ICougarParserListener;
			if (typedListener != null) typedListener.ExitGenerator_name(this);
		}
	}

	[RuleVersion(0)]
	public Generator_nameContext generator_name() {
		Generator_nameContext _localctx = new Generator_nameContext(Context, State);
		EnterRule(_localctx, 50, RULE_generator_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 435;
			Match(GENERATOR_WORD);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Generator_parensContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GENERATOR_OPEN() { return GetToken(CougarParser.GENERATOR_OPEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Generator_nameContext generator_name() {
			return GetRuleContext<Generator_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GENERATOR_CLOSE() { return GetToken(CougarParser.GENERATOR_CLOSE, 0); }
		public Generator_parensContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_generator_parens; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICougarParserListener typedListener = listener as ICougarParserListener;
			if (typedListener != null) typedListener.EnterGenerator_parens(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICougarParserListener typedListener = listener as ICougarParserListener;
			if (typedListener != null) typedListener.ExitGenerator_parens(this);
		}
	}

	[RuleVersion(0)]
	public Generator_parensContext generator_parens() {
		Generator_parensContext _localctx = new Generator_parensContext(Context, State);
		EnterRule(_localctx, 52, RULE_generator_parens);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 437;
			Match(GENERATOR_OPEN);
			State = 438;
			generator_name();
			State = 439;
			Match(GENERATOR_CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Consumer_attributeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONSUMER_ATTRIBUTE() { return GetToken(CougarParser.CONSUMER_ATTRIBUTE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONSUMER_END() { return GetToken(CougarParser.CONSUMER_END, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Consumer_listContext consumer_list() {
			return GetRuleContext<Consumer_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Attribute_extensionContext[] attribute_extension() {
			return GetRuleContexts<Attribute_extensionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Attribute_extensionContext attribute_extension(int i) {
			return GetRuleContext<Attribute_extensionContext>(i);
		}
		public Consumer_attributeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_consumer_attribute; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICougarParserListener typedListener = listener as ICougarParserListener;
			if (typedListener != null) typedListener.EnterConsumer_attribute(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICougarParserListener typedListener = listener as ICougarParserListener;
			if (typedListener != null) typedListener.ExitConsumer_attribute(this);
		}
	}

	[RuleVersion(0)]
	public Consumer_attributeContext consumer_attribute() {
		Consumer_attributeContext _localctx = new Consumer_attributeContext(Context, State);
		EnterRule(_localctx, 54, RULE_consumer_attribute);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 441;
			Match(CONSUMER_ATTRIBUTE);
			State = 443;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==CONSUMER_WORD) {
				{
				State = 442;
				consumer_list();
				}
			}

			State = 445;
			Match(CONSUMER_END);
			State = 449;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,36,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 446;
					attribute_extension();
					}
					} 
				}
				State = 451;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,36,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Consumer_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Consumer_nameContext[] consumer_name() {
			return GetRuleContexts<Consumer_nameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Consumer_nameContext consumer_name(int i) {
			return GetRuleContext<Consumer_nameContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] CONSUMER_SEPARATOR() { return GetTokens(CougarParser.CONSUMER_SEPARATOR); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONSUMER_SEPARATOR(int i) {
			return GetToken(CougarParser.CONSUMER_SEPARATOR, i);
		}
		public Consumer_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_consumer_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICougarParserListener typedListener = listener as ICougarParserListener;
			if (typedListener != null) typedListener.EnterConsumer_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICougarParserListener typedListener = listener as ICougarParserListener;
			if (typedListener != null) typedListener.ExitConsumer_list(this);
		}
	}

	[RuleVersion(0)]
	public Consumer_listContext consumer_list() {
		Consumer_listContext _localctx = new Consumer_listContext(Context, State);
		EnterRule(_localctx, 56, RULE_consumer_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 452;
			consumer_name();
			State = 459;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==CONSUMER_WORD || _la==CONSUMER_SEPARATOR) {
				{
				{
				State = 454;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==CONSUMER_SEPARATOR) {
					{
					State = 453;
					Match(CONSUMER_SEPARATOR);
					}
				}

				State = 456;
				consumer_name();
				}
				}
				State = 461;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Consumer_nameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONSUMER_WORD() { return GetToken(CougarParser.CONSUMER_WORD, 0); }
		public Consumer_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_consumer_name; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICougarParserListener typedListener = listener as ICougarParserListener;
			if (typedListener != null) typedListener.EnterConsumer_name(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICougarParserListener typedListener = listener as ICougarParserListener;
			if (typedListener != null) typedListener.ExitConsumer_name(this);
		}
	}

	[RuleVersion(0)]
	public Consumer_nameContext consumer_name() {
		Consumer_nameContext _localctx = new Consumer_nameContext(Context, State);
		EnterRule(_localctx, 58, RULE_consumer_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 462;
			Match(CONSUMER_WORD);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alertlevel_attributeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALERTLEVEL_ATTRIBUTE() { return GetToken(CougarParser.ALERTLEVEL_ATTRIBUTE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALERTLEVEL_END() { return GetToken(CougarParser.ALERTLEVEL_END, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Alertlevel_listContext alertlevel_list() {
			return GetRuleContext<Alertlevel_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Attribute_extensionContext[] attribute_extension() {
			return GetRuleContexts<Attribute_extensionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Attribute_extensionContext attribute_extension(int i) {
			return GetRuleContext<Attribute_extensionContext>(i);
		}
		public Alertlevel_attributeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alertlevel_attribute; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICougarParserListener typedListener = listener as ICougarParserListener;
			if (typedListener != null) typedListener.EnterAlertlevel_attribute(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICougarParserListener typedListener = listener as ICougarParserListener;
			if (typedListener != null) typedListener.ExitAlertlevel_attribute(this);
		}
	}

	[RuleVersion(0)]
	public Alertlevel_attributeContext alertlevel_attribute() {
		Alertlevel_attributeContext _localctx = new Alertlevel_attributeContext(Context, State);
		EnterRule(_localctx, 60, RULE_alertlevel_attribute);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 464;
			Match(ALERTLEVEL_ATTRIBUTE);
			State = 466;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ALERTLEVEL_WORD) {
				{
				State = 465;
				alertlevel_list();
				}
			}

			State = 468;
			Match(ALERTLEVEL_END);
			State = 472;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,40,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 469;
					attribute_extension();
					}
					} 
				}
				State = 474;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,40,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alertlevel_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Alertlevel_nameContext[] alertlevel_name() {
			return GetRuleContexts<Alertlevel_nameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Alertlevel_nameContext alertlevel_name(int i) {
			return GetRuleContext<Alertlevel_nameContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ALERTLEVEL_SEPARATOR() { return GetTokens(CougarParser.ALERTLEVEL_SEPARATOR); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALERTLEVEL_SEPARATOR(int i) {
			return GetToken(CougarParser.ALERTLEVEL_SEPARATOR, i);
		}
		public Alertlevel_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alertlevel_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICougarParserListener typedListener = listener as ICougarParserListener;
			if (typedListener != null) typedListener.EnterAlertlevel_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICougarParserListener typedListener = listener as ICougarParserListener;
			if (typedListener != null) typedListener.ExitAlertlevel_list(this);
		}
	}

	[RuleVersion(0)]
	public Alertlevel_listContext alertlevel_list() {
		Alertlevel_listContext _localctx = new Alertlevel_listContext(Context, State);
		EnterRule(_localctx, 62, RULE_alertlevel_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 475;
			alertlevel_name();
			State = 480;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==ALERTLEVEL_SEPARATOR) {
				{
				{
				State = 476;
				Match(ALERTLEVEL_SEPARATOR);
				State = 477;
				alertlevel_name();
				}
				}
				State = 482;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alertlevel_nameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALERTLEVEL_WORD() { return GetToken(CougarParser.ALERTLEVEL_WORD, 0); }
		public Alertlevel_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alertlevel_name; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICougarParserListener typedListener = listener as ICougarParserListener;
			if (typedListener != null) typedListener.EnterAlertlevel_name(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICougarParserListener typedListener = listener as ICougarParserListener;
			if (typedListener != null) typedListener.ExitAlertlevel_name(this);
		}
	}

	[RuleVersion(0)]
	public Alertlevel_nameContext alertlevel_name() {
		Alertlevel_nameContext _localctx = new Alertlevel_nameContext(Context, State);
		EnterRule(_localctx, 64, RULE_alertlevel_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 483;
			Match(ALERTLEVEL_WORD);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Reason_attributeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REASON_ATTRIBUTE() { return GetToken(CougarParser.REASON_ATTRIBUTE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REASON_END() { return GetToken(CougarParser.REASON_END, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Reason_listContext reason_list() {
			return GetRuleContext<Reason_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Reason_detailContext[] reason_detail() {
			return GetRuleContexts<Reason_detailContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Reason_detailContext reason_detail(int i) {
			return GetRuleContext<Reason_detailContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Attribute_extensionContext[] attribute_extension() {
			return GetRuleContexts<Attribute_extensionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Attribute_extensionContext attribute_extension(int i) {
			return GetRuleContext<Attribute_extensionContext>(i);
		}
		public Reason_attributeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_reason_attribute; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICougarParserListener typedListener = listener as ICougarParserListener;
			if (typedListener != null) typedListener.EnterReason_attribute(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICougarParserListener typedListener = listener as ICougarParserListener;
			if (typedListener != null) typedListener.ExitReason_attribute(this);
		}
	}

	[RuleVersion(0)]
	public Reason_attributeContext reason_attribute() {
		Reason_attributeContext _localctx = new Reason_attributeContext(Context, State);
		EnterRule(_localctx, 66, RULE_reason_attribute);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 485;
			Match(REASON_ATTRIBUTE);
			State = 487;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,42,Context) ) {
			case 1:
				{
				State = 486;
				reason_list();
				}
				break;
			}
			State = 492;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==REASON_SEPARATOR) {
				{
				{
				State = 489;
				reason_detail();
				}
				}
				State = 494;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 495;
			Match(REASON_END);
			State = 499;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,44,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 496;
					attribute_extension();
					}
					} 
				}
				State = 501;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,44,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Reason_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Reason_wordContext[] reason_word() {
			return GetRuleContexts<Reason_wordContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Reason_wordContext reason_word(int i) {
			return GetRuleContext<Reason_wordContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Reason_numericContext[] reason_numeric() {
			return GetRuleContexts<Reason_numericContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Reason_numericContext reason_numeric(int i) {
			return GetRuleContext<Reason_numericContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Reason_hexContext[] reason_hex() {
			return GetRuleContexts<Reason_hexContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Reason_hexContext reason_hex(int i) {
			return GetRuleContext<Reason_hexContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Reason_parensContext[] reason_parens() {
			return GetRuleContexts<Reason_parensContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Reason_parensContext reason_parens(int i) {
			return GetRuleContext<Reason_parensContext>(i);
		}
		public Reason_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_reason_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICougarParserListener typedListener = listener as ICougarParserListener;
			if (typedListener != null) typedListener.EnterReason_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICougarParserListener typedListener = listener as ICougarParserListener;
			if (typedListener != null) typedListener.ExitReason_list(this);
		}
	}

	[RuleVersion(0)]
	public Reason_listContext reason_list() {
		Reason_listContext _localctx = new Reason_listContext(Context, State);
		EnterRule(_localctx, 68, RULE_reason_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 508;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (((((_la - 135)) & ~0x3f) == 0 && ((1L << (_la - 135)) & 15L) != 0)) {
				{
				State = 506;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case REASON_WORD:
					{
					State = 502;
					reason_word();
					}
					break;
				case REASON_NUMERIC:
					{
					State = 503;
					reason_numeric();
					}
					break;
				case REASON_HEX:
					{
					State = 504;
					reason_hex();
					}
					break;
				case REASON_OPEN:
					{
					State = 505;
					reason_parens();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 510;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Reason_detailContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REASON_SEPARATOR() { return GetToken(CougarParser.REASON_SEPARATOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Reason_listContext reason_list() {
			return GetRuleContext<Reason_listContext>(0);
		}
		public Reason_detailContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_reason_detail; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICougarParserListener typedListener = listener as ICougarParserListener;
			if (typedListener != null) typedListener.EnterReason_detail(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICougarParserListener typedListener = listener as ICougarParserListener;
			if (typedListener != null) typedListener.ExitReason_detail(this);
		}
	}

	[RuleVersion(0)]
	public Reason_detailContext reason_detail() {
		Reason_detailContext _localctx = new Reason_detailContext(Context, State);
		EnterRule(_localctx, 70, RULE_reason_detail);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 511;
			Match(REASON_SEPARATOR);
			State = 512;
			reason_list();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Reason_wordContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REASON_WORD() { return GetToken(CougarParser.REASON_WORD, 0); }
		public Reason_wordContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_reason_word; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICougarParserListener typedListener = listener as ICougarParserListener;
			if (typedListener != null) typedListener.EnterReason_word(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICougarParserListener typedListener = listener as ICougarParserListener;
			if (typedListener != null) typedListener.ExitReason_word(this);
		}
	}

	[RuleVersion(0)]
	public Reason_wordContext reason_word() {
		Reason_wordContext _localctx = new Reason_wordContext(Context, State);
		EnterRule(_localctx, 72, RULE_reason_word);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 514;
			Match(REASON_WORD);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Reason_numericContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REASON_NUMERIC() { return GetToken(CougarParser.REASON_NUMERIC, 0); }
		public Reason_numericContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_reason_numeric; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICougarParserListener typedListener = listener as ICougarParserListener;
			if (typedListener != null) typedListener.EnterReason_numeric(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICougarParserListener typedListener = listener as ICougarParserListener;
			if (typedListener != null) typedListener.ExitReason_numeric(this);
		}
	}

	[RuleVersion(0)]
	public Reason_numericContext reason_numeric() {
		Reason_numericContext _localctx = new Reason_numericContext(Context, State);
		EnterRule(_localctx, 74, RULE_reason_numeric);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 516;
			Match(REASON_NUMERIC);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Reason_hexContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REASON_HEX() { return GetToken(CougarParser.REASON_HEX, 0); }
		public Reason_hexContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_reason_hex; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICougarParserListener typedListener = listener as ICougarParserListener;
			if (typedListener != null) typedListener.EnterReason_hex(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICougarParserListener typedListener = listener as ICougarParserListener;
			if (typedListener != null) typedListener.ExitReason_hex(this);
		}
	}

	[RuleVersion(0)]
	public Reason_hexContext reason_hex() {
		Reason_hexContext _localctx = new Reason_hexContext(Context, State);
		EnterRule(_localctx, 76, RULE_reason_hex);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 518;
			Match(REASON_HEX);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Reason_parensContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REASON_OPEN() { return GetToken(CougarParser.REASON_OPEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REASON_CLOSE() { return GetToken(CougarParser.REASON_CLOSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Reason_wordContext[] reason_word() {
			return GetRuleContexts<Reason_wordContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Reason_wordContext reason_word(int i) {
			return GetRuleContext<Reason_wordContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Reason_numericContext[] reason_numeric() {
			return GetRuleContexts<Reason_numericContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Reason_numericContext reason_numeric(int i) {
			return GetRuleContext<Reason_numericContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Reason_hexContext[] reason_hex() {
			return GetRuleContexts<Reason_hexContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Reason_hexContext reason_hex(int i) {
			return GetRuleContext<Reason_hexContext>(i);
		}
		public Reason_parensContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_reason_parens; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICougarParserListener typedListener = listener as ICougarParserListener;
			if (typedListener != null) typedListener.EnterReason_parens(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICougarParserListener typedListener = listener as ICougarParserListener;
			if (typedListener != null) typedListener.ExitReason_parens(this);
		}
	}

	[RuleVersion(0)]
	public Reason_parensContext reason_parens() {
		Reason_parensContext _localctx = new Reason_parensContext(Context, State);
		EnterRule(_localctx, 78, RULE_reason_parens);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 520;
			Match(REASON_OPEN);
			State = 524;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				State = 524;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case REASON_WORD:
					{
					State = 521;
					reason_word();
					}
					break;
				case REASON_NUMERIC:
					{
					State = 522;
					reason_numeric();
					}
					break;
				case REASON_HEX:
					{
					State = 523;
					reason_hex();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 526;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( ((((_la - 135)) & ~0x3f) == 0 && ((1L << (_la - 135)) & 7L) != 0) );
			State = 528;
			Match(REASON_CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Wabfilter_attributeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WABFILTER_ATTRIBUTE() { return GetToken(CougarParser.WABFILTER_ATTRIBUTE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WABFILTER_END() { return GetToken(CougarParser.WABFILTER_END, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Wabfilter_subsiteContext[] wabfilter_subsite() {
			return GetRuleContexts<Wabfilter_subsiteContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Wabfilter_subsiteContext wabfilter_subsite(int i) {
			return GetRuleContext<Wabfilter_subsiteContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Wabfilter_siteContext[] wabfilter_site() {
			return GetRuleContexts<Wabfilter_siteContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Wabfilter_siteContext wabfilter_site(int i) {
			return GetRuleContext<Wabfilter_siteContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Wabfilter_lhostContext[] wabfilter_lhost() {
			return GetRuleContexts<Wabfilter_lhostContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Wabfilter_lhostContext wabfilter_lhost(int i) {
			return GetRuleContext<Wabfilter_lhostContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Wabfilter_ghostContext[] wabfilter_ghost() {
			return GetRuleContexts<Wabfilter_ghostContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Wabfilter_ghostContext wabfilter_ghost(int i) {
			return GetRuleContext<Wabfilter_ghostContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Wabfilter_hostContext[] wabfilter_host() {
			return GetRuleContexts<Wabfilter_hostContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Wabfilter_hostContext wabfilter_host(int i) {
			return GetRuleContext<Wabfilter_hostContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Wabfilter_ghosthourContext[] wabfilter_ghosthour() {
			return GetRuleContexts<Wabfilter_ghosthourContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Wabfilter_ghosthourContext wabfilter_ghosthour(int i) {
			return GetRuleContext<Wabfilter_ghosthourContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Wabfilter_sitehourContext[] wabfilter_sitehour() {
			return GetRuleContexts<Wabfilter_sitehourContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Wabfilter_sitehourContext wabfilter_sitehour(int i) {
			return GetRuleContext<Wabfilter_sitehourContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Wabfilter_watsiteContext[] wabfilter_watsite() {
			return GetRuleContexts<Wabfilter_watsiteContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Wabfilter_watsiteContext wabfilter_watsite(int i) {
			return GetRuleContext<Wabfilter_watsiteContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Wabfilter_wathostContext[] wabfilter_wathost() {
			return GetRuleContexts<Wabfilter_wathostContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Wabfilter_wathostContext wabfilter_wathost(int i) {
			return GetRuleContext<Wabfilter_wathostContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Wabfilter_nsawabContext[] wabfilter_nsawab() {
			return GetRuleContexts<Wabfilter_nsawabContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Wabfilter_nsawabContext wabfilter_nsawab(int i) {
			return GetRuleContext<Wabfilter_nsawabContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Attribute_extensionContext[] attribute_extension() {
			return GetRuleContexts<Attribute_extensionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Attribute_extensionContext attribute_extension(int i) {
			return GetRuleContext<Attribute_extensionContext>(i);
		}
		public Wabfilter_attributeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_wabfilter_attribute; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICougarParserListener typedListener = listener as ICougarParserListener;
			if (typedListener != null) typedListener.EnterWabfilter_attribute(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICougarParserListener typedListener = listener as ICougarParserListener;
			if (typedListener != null) typedListener.ExitWabfilter_attribute(this);
		}
	}

	[RuleVersion(0)]
	public Wabfilter_attributeContext wabfilter_attribute() {
		Wabfilter_attributeContext _localctx = new Wabfilter_attributeContext(Context, State);
		EnterRule(_localctx, 80, RULE_wabfilter_attribute);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 530;
			Match(WABFILTER_ATTRIBUTE);
			State = 543;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (((((_la - 77)) & ~0x3f) == 0 && ((1L << (_la - 77)) & 1023L) != 0)) {
				{
				State = 541;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case SUBSITE:
					{
					State = 531;
					wabfilter_subsite();
					}
					break;
				case SITE:
					{
					State = 532;
					wabfilter_site();
					}
					break;
				case LHOST:
					{
					State = 533;
					wabfilter_lhost();
					}
					break;
				case GHOST:
					{
					State = 534;
					wabfilter_ghost();
					}
					break;
				case HOST:
					{
					State = 535;
					wabfilter_host();
					}
					break;
				case GHOSTHOUR:
					{
					State = 536;
					wabfilter_ghosthour();
					}
					break;
				case SITEHOUR:
					{
					State = 537;
					wabfilter_sitehour();
					}
					break;
				case WATSITE:
					{
					State = 538;
					wabfilter_watsite();
					}
					break;
				case WATHOST:
					{
					State = 539;
					wabfilter_wathost();
					}
					break;
				case NSAWAB:
					{
					State = 540;
					wabfilter_nsawab();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 545;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 546;
			Match(WABFILTER_END);
			State = 550;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,51,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 547;
					attribute_extension();
					}
					} 
				}
				State = 552;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,51,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Wabfilter_siteContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SITE() { return GetToken(CougarParser.SITE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WABFILTER_COLON() { return GetToken(CougarParser.WABFILTER_COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Wabfilter_memberContext wabfilter_member() {
			return GetRuleContext<Wabfilter_memberContext>(0);
		}
		public Wabfilter_siteContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_wabfilter_site; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICougarParserListener typedListener = listener as ICougarParserListener;
			if (typedListener != null) typedListener.EnterWabfilter_site(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICougarParserListener typedListener = listener as ICougarParserListener;
			if (typedListener != null) typedListener.ExitWabfilter_site(this);
		}
	}

	[RuleVersion(0)]
	public Wabfilter_siteContext wabfilter_site() {
		Wabfilter_siteContext _localctx = new Wabfilter_siteContext(Context, State);
		EnterRule(_localctx, 82, RULE_wabfilter_site);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 553;
			Match(SITE);
			State = 556;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WABFILTER_COLON) {
				{
				State = 554;
				Match(WABFILTER_COLON);
				State = 555;
				wabfilter_member();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Wabfilter_subsiteContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SUBSITE() { return GetToken(CougarParser.SUBSITE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WABFILTER_COLON() { return GetToken(CougarParser.WABFILTER_COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Wabfilter_memberContext wabfilter_member() {
			return GetRuleContext<Wabfilter_memberContext>(0);
		}
		public Wabfilter_subsiteContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_wabfilter_subsite; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICougarParserListener typedListener = listener as ICougarParserListener;
			if (typedListener != null) typedListener.EnterWabfilter_subsite(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICougarParserListener typedListener = listener as ICougarParserListener;
			if (typedListener != null) typedListener.ExitWabfilter_subsite(this);
		}
	}

	[RuleVersion(0)]
	public Wabfilter_subsiteContext wabfilter_subsite() {
		Wabfilter_subsiteContext _localctx = new Wabfilter_subsiteContext(Context, State);
		EnterRule(_localctx, 84, RULE_wabfilter_subsite);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 558;
			Match(SUBSITE);
			State = 561;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WABFILTER_COLON) {
				{
				State = 559;
				Match(WABFILTER_COLON);
				State = 560;
				wabfilter_member();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Wabfilter_hostContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HOST() { return GetToken(CougarParser.HOST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WABFILTER_COLON() { return GetToken(CougarParser.WABFILTER_COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Wabfilter_memberContext wabfilter_member() {
			return GetRuleContext<Wabfilter_memberContext>(0);
		}
		public Wabfilter_hostContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_wabfilter_host; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICougarParserListener typedListener = listener as ICougarParserListener;
			if (typedListener != null) typedListener.EnterWabfilter_host(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICougarParserListener typedListener = listener as ICougarParserListener;
			if (typedListener != null) typedListener.ExitWabfilter_host(this);
		}
	}

	[RuleVersion(0)]
	public Wabfilter_hostContext wabfilter_host() {
		Wabfilter_hostContext _localctx = new Wabfilter_hostContext(Context, State);
		EnterRule(_localctx, 86, RULE_wabfilter_host);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 563;
			Match(HOST);
			State = 566;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WABFILTER_COLON) {
				{
				State = 564;
				Match(WABFILTER_COLON);
				State = 565;
				wabfilter_member();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Wabfilter_lhostContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LHOST() { return GetToken(CougarParser.LHOST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WABFILTER_COLON() { return GetToken(CougarParser.WABFILTER_COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Wabfilter_memberContext wabfilter_member() {
			return GetRuleContext<Wabfilter_memberContext>(0);
		}
		public Wabfilter_lhostContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_wabfilter_lhost; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICougarParserListener typedListener = listener as ICougarParserListener;
			if (typedListener != null) typedListener.EnterWabfilter_lhost(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICougarParserListener typedListener = listener as ICougarParserListener;
			if (typedListener != null) typedListener.ExitWabfilter_lhost(this);
		}
	}

	[RuleVersion(0)]
	public Wabfilter_lhostContext wabfilter_lhost() {
		Wabfilter_lhostContext _localctx = new Wabfilter_lhostContext(Context, State);
		EnterRule(_localctx, 88, RULE_wabfilter_lhost);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 568;
			Match(LHOST);
			State = 571;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WABFILTER_COLON) {
				{
				State = 569;
				Match(WABFILTER_COLON);
				State = 570;
				wabfilter_member();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Wabfilter_ghostContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GHOST() { return GetToken(CougarParser.GHOST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WABFILTER_COLON() { return GetToken(CougarParser.WABFILTER_COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Wabfilter_memberContext wabfilter_member() {
			return GetRuleContext<Wabfilter_memberContext>(0);
		}
		public Wabfilter_ghostContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_wabfilter_ghost; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICougarParserListener typedListener = listener as ICougarParserListener;
			if (typedListener != null) typedListener.EnterWabfilter_ghost(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICougarParserListener typedListener = listener as ICougarParserListener;
			if (typedListener != null) typedListener.ExitWabfilter_ghost(this);
		}
	}

	[RuleVersion(0)]
	public Wabfilter_ghostContext wabfilter_ghost() {
		Wabfilter_ghostContext _localctx = new Wabfilter_ghostContext(Context, State);
		EnterRule(_localctx, 90, RULE_wabfilter_ghost);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 573;
			Match(GHOST);
			State = 576;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WABFILTER_COLON) {
				{
				State = 574;
				Match(WABFILTER_COLON);
				State = 575;
				wabfilter_member();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Wabfilter_ghosthourContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GHOSTHOUR() { return GetToken(CougarParser.GHOSTHOUR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WABFILTER_COLON() { return GetToken(CougarParser.WABFILTER_COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Wabfilter_memberContext wabfilter_member() {
			return GetRuleContext<Wabfilter_memberContext>(0);
		}
		public Wabfilter_ghosthourContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_wabfilter_ghosthour; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICougarParserListener typedListener = listener as ICougarParserListener;
			if (typedListener != null) typedListener.EnterWabfilter_ghosthour(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICougarParserListener typedListener = listener as ICougarParserListener;
			if (typedListener != null) typedListener.ExitWabfilter_ghosthour(this);
		}
	}

	[RuleVersion(0)]
	public Wabfilter_ghosthourContext wabfilter_ghosthour() {
		Wabfilter_ghosthourContext _localctx = new Wabfilter_ghosthourContext(Context, State);
		EnterRule(_localctx, 92, RULE_wabfilter_ghosthour);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 578;
			Match(GHOSTHOUR);
			State = 581;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WABFILTER_COLON) {
				{
				State = 579;
				Match(WABFILTER_COLON);
				State = 580;
				wabfilter_member();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Wabfilter_sitehourContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SITEHOUR() { return GetToken(CougarParser.SITEHOUR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WABFILTER_COLON() { return GetToken(CougarParser.WABFILTER_COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Wabfilter_memberContext wabfilter_member() {
			return GetRuleContext<Wabfilter_memberContext>(0);
		}
		public Wabfilter_sitehourContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_wabfilter_sitehour; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICougarParserListener typedListener = listener as ICougarParserListener;
			if (typedListener != null) typedListener.EnterWabfilter_sitehour(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICougarParserListener typedListener = listener as ICougarParserListener;
			if (typedListener != null) typedListener.ExitWabfilter_sitehour(this);
		}
	}

	[RuleVersion(0)]
	public Wabfilter_sitehourContext wabfilter_sitehour() {
		Wabfilter_sitehourContext _localctx = new Wabfilter_sitehourContext(Context, State);
		EnterRule(_localctx, 94, RULE_wabfilter_sitehour);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 583;
			Match(SITEHOUR);
			State = 586;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WABFILTER_COLON) {
				{
				State = 584;
				Match(WABFILTER_COLON);
				State = 585;
				wabfilter_member();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Wabfilter_watsiteContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WATSITE() { return GetToken(CougarParser.WATSITE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WABFILTER_COLON() { return GetToken(CougarParser.WABFILTER_COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Wabfilter_memberContext wabfilter_member() {
			return GetRuleContext<Wabfilter_memberContext>(0);
		}
		public Wabfilter_watsiteContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_wabfilter_watsite; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICougarParserListener typedListener = listener as ICougarParserListener;
			if (typedListener != null) typedListener.EnterWabfilter_watsite(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICougarParserListener typedListener = listener as ICougarParserListener;
			if (typedListener != null) typedListener.ExitWabfilter_watsite(this);
		}
	}

	[RuleVersion(0)]
	public Wabfilter_watsiteContext wabfilter_watsite() {
		Wabfilter_watsiteContext _localctx = new Wabfilter_watsiteContext(Context, State);
		EnterRule(_localctx, 96, RULE_wabfilter_watsite);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 588;
			Match(WATSITE);
			State = 591;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WABFILTER_COLON) {
				{
				State = 589;
				Match(WABFILTER_COLON);
				State = 590;
				wabfilter_member();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Wabfilter_wathostContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WATHOST() { return GetToken(CougarParser.WATHOST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WABFILTER_COLON() { return GetToken(CougarParser.WABFILTER_COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Wabfilter_memberContext wabfilter_member() {
			return GetRuleContext<Wabfilter_memberContext>(0);
		}
		public Wabfilter_wathostContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_wabfilter_wathost; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICougarParserListener typedListener = listener as ICougarParserListener;
			if (typedListener != null) typedListener.EnterWabfilter_wathost(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICougarParserListener typedListener = listener as ICougarParserListener;
			if (typedListener != null) typedListener.ExitWabfilter_wathost(this);
		}
	}

	[RuleVersion(0)]
	public Wabfilter_wathostContext wabfilter_wathost() {
		Wabfilter_wathostContext _localctx = new Wabfilter_wathostContext(Context, State);
		EnterRule(_localctx, 98, RULE_wabfilter_wathost);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 593;
			Match(WATHOST);
			State = 596;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WABFILTER_COLON) {
				{
				State = 594;
				Match(WABFILTER_COLON);
				State = 595;
				wabfilter_member();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Wabfilter_nsawabContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NSAWAB() { return GetToken(CougarParser.NSAWAB, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WABFILTER_COLON() { return GetToken(CougarParser.WABFILTER_COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Wabfilter_memberContext wabfilter_member() {
			return GetRuleContext<Wabfilter_memberContext>(0);
		}
		public Wabfilter_nsawabContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_wabfilter_nsawab; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICougarParserListener typedListener = listener as ICougarParserListener;
			if (typedListener != null) typedListener.EnterWabfilter_nsawab(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICougarParserListener typedListener = listener as ICougarParserListener;
			if (typedListener != null) typedListener.ExitWabfilter_nsawab(this);
		}
	}

	[RuleVersion(0)]
	public Wabfilter_nsawabContext wabfilter_nsawab() {
		Wabfilter_nsawabContext _localctx = new Wabfilter_nsawabContext(Context, State);
		EnterRule(_localctx, 100, RULE_wabfilter_nsawab);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 598;
			Match(NSAWAB);
			State = 601;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WABFILTER_COLON) {
				{
				State = 599;
				Match(WABFILTER_COLON);
				State = 600;
				wabfilter_member();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Wabfilter_memberContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Wabfilter_member_partContext[] wabfilter_member_part() {
			return GetRuleContexts<Wabfilter_member_partContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Wabfilter_member_partContext wabfilter_member_part(int i) {
			return GetRuleContext<Wabfilter_member_partContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] WABFILTER_PERIOD() { return GetTokens(CougarParser.WABFILTER_PERIOD); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WABFILTER_PERIOD(int i) {
			return GetToken(CougarParser.WABFILTER_PERIOD, i);
		}
		public Wabfilter_memberContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_wabfilter_member; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICougarParserListener typedListener = listener as ICougarParserListener;
			if (typedListener != null) typedListener.EnterWabfilter_member(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICougarParserListener typedListener = listener as ICougarParserListener;
			if (typedListener != null) typedListener.ExitWabfilter_member(this);
		}
	}

	[RuleVersion(0)]
	public Wabfilter_memberContext wabfilter_member() {
		Wabfilter_memberContext _localctx = new Wabfilter_memberContext(Context, State);
		EnterRule(_localctx, 102, RULE_wabfilter_member);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 603;
			wabfilter_member_part();
			State = 608;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==WABFILTER_PERIOD) {
				{
				{
				State = 604;
				Match(WABFILTER_PERIOD);
				State = 605;
				wabfilter_member_part();
				}
				}
				State = 610;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Wabfilter_member_partContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WABFILTER_VALUE() { return GetToken(CougarParser.WABFILTER_VALUE, 0); }
		public Wabfilter_member_partContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_wabfilter_member_part; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICougarParserListener typedListener = listener as ICougarParserListener;
			if (typedListener != null) typedListener.EnterWabfilter_member_part(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICougarParserListener typedListener = listener as ICougarParserListener;
			if (typedListener != null) typedListener.ExitWabfilter_member_part(this);
		}
	}

	[RuleVersion(0)]
	public Wabfilter_member_partContext wabfilter_member_part() {
		Wabfilter_member_partContext _localctx = new Wabfilter_member_partContext(Context, State);
		EnterRule(_localctx, 104, RULE_wabfilter_member_part);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 611;
			Match(WABFILTER_VALUE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Fielddesc_attributeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FIELDDESC_ATTRIBUTE() { return GetToken(CougarParser.FIELDDESC_ATTRIBUTE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FIELDDESC_END() { return GetToken(CougarParser.FIELDDESC_END, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Fielddesc_nameContext fielddesc_name() {
			return GetRuleContext<Fielddesc_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Fielddesc_descContext fielddesc_desc() {
			return GetRuleContext<Fielddesc_descContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Fielddesc_detailContext[] fielddesc_detail() {
			return GetRuleContexts<Fielddesc_detailContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Fielddesc_detailContext fielddesc_detail(int i) {
			return GetRuleContext<Fielddesc_detailContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Attribute_extensionContext[] attribute_extension() {
			return GetRuleContexts<Attribute_extensionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Attribute_extensionContext attribute_extension(int i) {
			return GetRuleContext<Attribute_extensionContext>(i);
		}
		public Fielddesc_attributeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fielddesc_attribute; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICougarParserListener typedListener = listener as ICougarParserListener;
			if (typedListener != null) typedListener.EnterFielddesc_attribute(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICougarParserListener typedListener = listener as ICougarParserListener;
			if (typedListener != null) typedListener.ExitFielddesc_attribute(this);
		}
	}

	[RuleVersion(0)]
	public Fielddesc_attributeContext fielddesc_attribute() {
		Fielddesc_attributeContext _localctx = new Fielddesc_attributeContext(Context, State);
		EnterRule(_localctx, 106, RULE_fielddesc_attribute);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 613;
			Match(FIELDDESC_ATTRIBUTE);
			State = 616;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,63,Context) ) {
			case 1:
				{
				State = 614;
				fielddesc_name();
				}
				break;
			case 2:
				{
				State = 615;
				fielddesc_desc();
				}
				break;
			}
			State = 621;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==FIELDDESC_SEPARATOR) {
				{
				{
				State = 618;
				fielddesc_detail();
				}
				}
				State = 623;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 624;
			Match(FIELDDESC_END);
			State = 628;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,65,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 625;
					attribute_extension();
					}
					} 
				}
				State = 630;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,65,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Fielddesc_nameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] FIELDDESC_WORD() { return GetTokens(CougarParser.FIELDDESC_WORD); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FIELDDESC_WORD(int i) {
			return GetToken(CougarParser.FIELDDESC_WORD, i);
		}
		public Fielddesc_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fielddesc_name; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICougarParserListener typedListener = listener as ICougarParserListener;
			if (typedListener != null) typedListener.EnterFielddesc_name(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICougarParserListener typedListener = listener as ICougarParserListener;
			if (typedListener != null) typedListener.ExitFielddesc_name(this);
		}
	}

	[RuleVersion(0)]
	public Fielddesc_nameContext fielddesc_name() {
		Fielddesc_nameContext _localctx = new Fielddesc_nameContext(Context, State);
		EnterRule(_localctx, 108, RULE_fielddesc_name);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 632;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 631;
				Match(FIELDDESC_WORD);
				}
				}
				State = 634;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==FIELDDESC_WORD );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Fielddesc_descContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Fielddesc_wordContext[] fielddesc_word() {
			return GetRuleContexts<Fielddesc_wordContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Fielddesc_wordContext fielddesc_word(int i) {
			return GetRuleContext<Fielddesc_wordContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Fielddesc_numericContext[] fielddesc_numeric() {
			return GetRuleContexts<Fielddesc_numericContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Fielddesc_numericContext fielddesc_numeric(int i) {
			return GetRuleContext<Fielddesc_numericContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Fielddesc_hexContext[] fielddesc_hex() {
			return GetRuleContexts<Fielddesc_hexContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Fielddesc_hexContext fielddesc_hex(int i) {
			return GetRuleContext<Fielddesc_hexContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Fielddesc_parensContext[] fielddesc_parens() {
			return GetRuleContexts<Fielddesc_parensContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Fielddesc_parensContext fielddesc_parens(int i) {
			return GetRuleContext<Fielddesc_parensContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Fielddesc_exprContext[] fielddesc_expr() {
			return GetRuleContexts<Fielddesc_exprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Fielddesc_exprContext fielddesc_expr(int i) {
			return GetRuleContext<Fielddesc_exprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Fielddesc_punctuationContext[] fielddesc_punctuation() {
			return GetRuleContexts<Fielddesc_punctuationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Fielddesc_punctuationContext fielddesc_punctuation(int i) {
			return GetRuleContext<Fielddesc_punctuationContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Fielddesc_moneyContext[] fielddesc_money() {
			return GetRuleContexts<Fielddesc_moneyContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Fielddesc_moneyContext fielddesc_money(int i) {
			return GetRuleContext<Fielddesc_moneyContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Fielddesc_quoted_stringContext[] fielddesc_quoted_string() {
			return GetRuleContexts<Fielddesc_quoted_stringContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Fielddesc_quoted_stringContext fielddesc_quoted_string(int i) {
			return GetRuleContext<Fielddesc_quoted_stringContext>(i);
		}
		public Fielddesc_descContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fielddesc_desc; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICougarParserListener typedListener = listener as ICougarParserListener;
			if (typedListener != null) typedListener.EnterFielddesc_desc(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICougarParserListener typedListener = listener as ICougarParserListener;
			if (typedListener != null) typedListener.ExitFielddesc_desc(this);
		}
	}

	[RuleVersion(0)]
	public Fielddesc_descContext fielddesc_desc() {
		Fielddesc_descContext _localctx = new Fielddesc_descContext(Context, State);
		EnterRule(_localctx, 110, RULE_fielddesc_desc);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 646;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,68,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					State = 644;
					ErrorHandler.Sync(this);
					switch (TokenStream.LA(1)) {
					case FIELDDESC_WORD:
						{
						State = 636;
						fielddesc_word();
						}
						break;
					case FIELDDESC_NUMERIC:
						{
						State = 637;
						fielddesc_numeric();
						}
						break;
					case FIELDDESC_HEX:
						{
						State = 638;
						fielddesc_hex();
						}
						break;
					case FIELDDESC_OPEN:
						{
						State = 639;
						fielddesc_parens();
						}
						break;
					case FIELDDESC_EXPR:
						{
						State = 640;
						fielddesc_expr();
						}
						break;
					case FIELDDESC_PUNCTUATION:
						{
						State = 641;
						fielddesc_punctuation();
						}
						break;
					case FIELDDESC_DOLLARS:
						{
						State = 642;
						fielddesc_money();
						}
						break;
					case FIELDDESC_QUOTE:
						{
						State = 643;
						fielddesc_quoted_string();
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					} 
				}
				State = 648;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,68,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Fielddesc_detailContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FIELDDESC_SEPARATOR() { return GetToken(CougarParser.FIELDDESC_SEPARATOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Fielddesc_descContext fielddesc_desc() {
			return GetRuleContext<Fielddesc_descContext>(0);
		}
		public Fielddesc_detailContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fielddesc_detail; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICougarParserListener typedListener = listener as ICougarParserListener;
			if (typedListener != null) typedListener.EnterFielddesc_detail(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICougarParserListener typedListener = listener as ICougarParserListener;
			if (typedListener != null) typedListener.ExitFielddesc_detail(this);
		}
	}

	[RuleVersion(0)]
	public Fielddesc_detailContext fielddesc_detail() {
		Fielddesc_detailContext _localctx = new Fielddesc_detailContext(Context, State);
		EnterRule(_localctx, 112, RULE_fielddesc_detail);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 649;
			Match(FIELDDESC_SEPARATOR);
			State = 650;
			fielddesc_desc();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Fielddesc_wordContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FIELDDESC_WORD() { return GetToken(CougarParser.FIELDDESC_WORD, 0); }
		public Fielddesc_wordContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fielddesc_word; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICougarParserListener typedListener = listener as ICougarParserListener;
			if (typedListener != null) typedListener.EnterFielddesc_word(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICougarParserListener typedListener = listener as ICougarParserListener;
			if (typedListener != null) typedListener.ExitFielddesc_word(this);
		}
	}

	[RuleVersion(0)]
	public Fielddesc_wordContext fielddesc_word() {
		Fielddesc_wordContext _localctx = new Fielddesc_wordContext(Context, State);
		EnterRule(_localctx, 114, RULE_fielddesc_word);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 652;
			Match(FIELDDESC_WORD);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Fielddesc_numericContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FIELDDESC_NUMERIC() { return GetToken(CougarParser.FIELDDESC_NUMERIC, 0); }
		public Fielddesc_numericContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fielddesc_numeric; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICougarParserListener typedListener = listener as ICougarParserListener;
			if (typedListener != null) typedListener.EnterFielddesc_numeric(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICougarParserListener typedListener = listener as ICougarParserListener;
			if (typedListener != null) typedListener.ExitFielddesc_numeric(this);
		}
	}

	[RuleVersion(0)]
	public Fielddesc_numericContext fielddesc_numeric() {
		Fielddesc_numericContext _localctx = new Fielddesc_numericContext(Context, State);
		EnterRule(_localctx, 116, RULE_fielddesc_numeric);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 654;
			Match(FIELDDESC_NUMERIC);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Fielddesc_hexContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FIELDDESC_HEX() { return GetToken(CougarParser.FIELDDESC_HEX, 0); }
		public Fielddesc_hexContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fielddesc_hex; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICougarParserListener typedListener = listener as ICougarParserListener;
			if (typedListener != null) typedListener.EnterFielddesc_hex(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICougarParserListener typedListener = listener as ICougarParserListener;
			if (typedListener != null) typedListener.ExitFielddesc_hex(this);
		}
	}

	[RuleVersion(0)]
	public Fielddesc_hexContext fielddesc_hex() {
		Fielddesc_hexContext _localctx = new Fielddesc_hexContext(Context, State);
		EnterRule(_localctx, 118, RULE_fielddesc_hex);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 656;
			Match(FIELDDESC_HEX);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Fielddesc_exprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FIELDDESC_EXPR() { return GetToken(CougarParser.FIELDDESC_EXPR, 0); }
		public Fielddesc_exprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fielddesc_expr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICougarParserListener typedListener = listener as ICougarParserListener;
			if (typedListener != null) typedListener.EnterFielddesc_expr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICougarParserListener typedListener = listener as ICougarParserListener;
			if (typedListener != null) typedListener.ExitFielddesc_expr(this);
		}
	}

	[RuleVersion(0)]
	public Fielddesc_exprContext fielddesc_expr() {
		Fielddesc_exprContext _localctx = new Fielddesc_exprContext(Context, State);
		EnterRule(_localctx, 120, RULE_fielddesc_expr);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 658;
			Match(FIELDDESC_EXPR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Fielddesc_punctuationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FIELDDESC_PUNCTUATION() { return GetToken(CougarParser.FIELDDESC_PUNCTUATION, 0); }
		public Fielddesc_punctuationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fielddesc_punctuation; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICougarParserListener typedListener = listener as ICougarParserListener;
			if (typedListener != null) typedListener.EnterFielddesc_punctuation(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICougarParserListener typedListener = listener as ICougarParserListener;
			if (typedListener != null) typedListener.ExitFielddesc_punctuation(this);
		}
	}

	[RuleVersion(0)]
	public Fielddesc_punctuationContext fielddesc_punctuation() {
		Fielddesc_punctuationContext _localctx = new Fielddesc_punctuationContext(Context, State);
		EnterRule(_localctx, 122, RULE_fielddesc_punctuation);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 660;
			Match(FIELDDESC_PUNCTUATION);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Fielddesc_parensContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FIELDDESC_OPEN() { return GetToken(CougarParser.FIELDDESC_OPEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Fielddesc_descContext fielddesc_desc() {
			return GetRuleContext<Fielddesc_descContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FIELDDESC_CLOSE() { return GetToken(CougarParser.FIELDDESC_CLOSE, 0); }
		public Fielddesc_parensContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fielddesc_parens; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICougarParserListener typedListener = listener as ICougarParserListener;
			if (typedListener != null) typedListener.EnterFielddesc_parens(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICougarParserListener typedListener = listener as ICougarParserListener;
			if (typedListener != null) typedListener.ExitFielddesc_parens(this);
		}
	}

	[RuleVersion(0)]
	public Fielddesc_parensContext fielddesc_parens() {
		Fielddesc_parensContext _localctx = new Fielddesc_parensContext(Context, State);
		EnterRule(_localctx, 124, RULE_fielddesc_parens);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 662;
			Match(FIELDDESC_OPEN);
			State = 663;
			fielddesc_desc();
			State = 664;
			Match(FIELDDESC_CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Fielddesc_moneyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FIELDDESC_DOLLARS() { return GetToken(CougarParser.FIELDDESC_DOLLARS, 0); }
		public Fielddesc_moneyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fielddesc_money; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICougarParserListener typedListener = listener as ICougarParserListener;
			if (typedListener != null) typedListener.EnterFielddesc_money(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICougarParserListener typedListener = listener as ICougarParserListener;
			if (typedListener != null) typedListener.ExitFielddesc_money(this);
		}
	}

	[RuleVersion(0)]
	public Fielddesc_moneyContext fielddesc_money() {
		Fielddesc_moneyContext _localctx = new Fielddesc_moneyContext(Context, State);
		EnterRule(_localctx, 126, RULE_fielddesc_money);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 666;
			Match(FIELDDESC_DOLLARS);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Fielddesc_quoted_stringContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] FIELDDESC_QUOTE() { return GetTokens(CougarParser.FIELDDESC_QUOTE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FIELDDESC_QUOTE(int i) {
			return GetToken(CougarParser.FIELDDESC_QUOTE, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Fielddesc_descContext fielddesc_desc() {
			return GetRuleContext<Fielddesc_descContext>(0);
		}
		public Fielddesc_quoted_stringContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fielddesc_quoted_string; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICougarParserListener typedListener = listener as ICougarParserListener;
			if (typedListener != null) typedListener.EnterFielddesc_quoted_string(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICougarParserListener typedListener = listener as ICougarParserListener;
			if (typedListener != null) typedListener.ExitFielddesc_quoted_string(this);
		}
	}

	[RuleVersion(0)]
	public Fielddesc_quoted_stringContext fielddesc_quoted_string() {
		Fielddesc_quoted_stringContext _localctx = new Fielddesc_quoted_stringContext(Context, State);
		EnterRule(_localctx, 128, RULE_fielddesc_quoted_string);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 668;
			Match(FIELDDESC_QUOTE);
			State = 669;
			fielddesc_desc();
			State = 670;
			Match(FIELDDESC_QUOTE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AttributeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ATTRIBUTE() { return GetToken(CougarParser.ATTRIBUTE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Attibute_keyContext attibute_key() {
			return GetRuleContext<Attibute_keyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Attribute_detailContext attribute_detail() {
			return GetRuleContext<Attribute_detailContext>(0);
		}
		public AttributeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_attribute; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICougarParserListener typedListener = listener as ICougarParserListener;
			if (typedListener != null) typedListener.EnterAttribute(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICougarParserListener typedListener = listener as ICougarParserListener;
			if (typedListener != null) typedListener.ExitAttribute(this);
		}
	}

	[RuleVersion(0)]
	public AttributeContext attribute() {
		AttributeContext _localctx = new AttributeContext(Context, State);
		EnterRule(_localctx, 130, RULE_attribute);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 672;
			Match(ATTRIBUTE);
			State = 673;
			attibute_key();
			State = 675;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (((((_la - 59)) & ~0x3f) == 0 && ((1L << (_la - 59)) & 138751L) != 0)) {
				{
				State = 674;
				attribute_detail();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MemberContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Type_nameContext type_name() {
			return GetRuleContext<Type_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Member_nameContext member_name() {
			return GetRuleContext<Member_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MEMBER_END() { return GetToken(CougarParser.MEMBER_END, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Array_declContext array_decl() {
			return GetRuleContext<Array_declContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Fielddesc_attributeContext fielddesc_attribute() {
			return GetRuleContext<Fielddesc_attributeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Attribute_extensionContext[] attribute_extension() {
			return GetRuleContexts<Attribute_extensionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Attribute_extensionContext attribute_extension(int i) {
			return GetRuleContext<Attribute_extensionContext>(i);
		}
		public MemberContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_member; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICougarParserListener typedListener = listener as ICougarParserListener;
			if (typedListener != null) typedListener.EnterMember(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICougarParserListener typedListener = listener as ICougarParserListener;
			if (typedListener != null) typedListener.ExitMember(this);
		}
	}

	[RuleVersion(0)]
	public MemberContext member() {
		MemberContext _localctx = new MemberContext(Context, State);
		EnterRule(_localctx, 132, RULE_member);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 677;
			type_name();
			State = 678;
			member_name();
			State = 680;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OPEN_SQUARE_BRACKET) {
				{
				State = 679;
				array_decl();
				}
			}

			State = 682;
			Match(MEMBER_END);
			State = 690;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,72,Context) ) {
			case 1:
				{
				State = 686;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,71,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 683;
						attribute_extension();
						}
						} 
					}
					State = 688;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,71,Context);
				}
				}
				break;
			case 2:
				{
				State = 689;
				fielddesc_attribute();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Array_declContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_SQUARE_BRACKET() { return GetToken(CougarParser.OPEN_SQUARE_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Const_valueContext const_value() {
			return GetRuleContext<Const_valueContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_SQUARE_BRACKET() { return GetToken(CougarParser.CLOSE_SQUARE_BRACKET, 0); }
		public Array_declContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_array_decl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICougarParserListener typedListener = listener as ICougarParserListener;
			if (typedListener != null) typedListener.EnterArray_decl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICougarParserListener typedListener = listener as ICougarParserListener;
			if (typedListener != null) typedListener.ExitArray_decl(this);
		}
	}

	[RuleVersion(0)]
	public Array_declContext array_decl() {
		Array_declContext _localctx = new Array_declContext(Context, State);
		EnterRule(_localctx, 134, RULE_array_decl);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 692;
			Match(OPEN_SQUARE_BRACKET);
			State = 693;
			const_value();
			State = 694;
			Match(CLOSE_SQUARE_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Attribute_valueContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Part_attribute_valueContext[] part_attribute_value() {
			return GetRuleContexts<Part_attribute_valueContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Part_attribute_valueContext part_attribute_value(int i) {
			return GetRuleContext<Part_attribute_valueContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Numeric_attribute_valueContext[] numeric_attribute_value() {
			return GetRuleContexts<Numeric_attribute_valueContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Numeric_attribute_valueContext numeric_attribute_value(int i) {
			return GetRuleContext<Numeric_attribute_valueContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Currency_attribute_valueContext[] currency_attribute_value() {
			return GetRuleContexts<Currency_attribute_valueContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Currency_attribute_valueContext currency_attribute_value(int i) {
			return GetRuleContext<Currency_attribute_valueContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Attribute_enumContext[] attribute_enum() {
			return GetRuleContexts<Attribute_enumContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Attribute_enumContext attribute_enum(int i) {
			return GetRuleContext<Attribute_enumContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Parenthesized_valueContext[] parenthesized_value() {
			return GetRuleContexts<Parenthesized_valueContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Parenthesized_valueContext parenthesized_value(int i) {
			return GetRuleContext<Parenthesized_valueContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PERIOD() { return GetToken(CougarParser.PERIOD, 0); }
		public Attribute_valueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_attribute_value; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICougarParserListener typedListener = listener as ICougarParserListener;
			if (typedListener != null) typedListener.EnterAttribute_value(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICougarParserListener typedListener = listener as ICougarParserListener;
			if (typedListener != null) typedListener.ExitAttribute_value(this);
		}
	}

	[RuleVersion(0)]
	public Attribute_valueContext attribute_value() {
		Attribute_valueContext _localctx = new Attribute_valueContext(Context, State);
		EnterRule(_localctx, 136, RULE_attribute_value);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 701;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				State = 701;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case ATTRIBUTE_QUOTED_VALUE:
				case HASH_ATTRIBUTE_VALUE:
				case QUESTION_ATTRIBUTE_VALUE:
				case OPERATOR_ATTRIBUTE_VALUE:
				case MEMBER_REFERENCE:
				case ATTRIBUTE_VALUE:
				case ATTRIBUTE_COLON:
					{
					State = 696;
					part_attribute_value();
					}
					break;
				case NUMERIC_ATTR_VALUE:
					{
					State = 697;
					numeric_attribute_value();
					}
					break;
				case CURRENCY_VALUE:
					{
					State = 698;
					currency_attribute_value();
					}
					break;
				case ATTRIBUTE_ENUM:
					{
					State = 699;
					attribute_enum();
					}
					break;
				case ATTRIBUTE_OPEN_BRACE:
					{
					State = 700;
					parenthesized_value();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 703;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( ((((_la - 59)) & ~0x3f) == 0 && ((1L << (_la - 59)) & 5631L) != 0) );
			State = 706;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==PERIOD) {
				{
				State = 705;
				Match(PERIOD);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Parenthesized_valueContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ATTRIBUTE_OPEN_BRACE() { return GetToken(CougarParser.ATTRIBUTE_OPEN_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ATTRIBUTE_CLOSE_BRACE() { return GetToken(CougarParser.ATTRIBUTE_CLOSE_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Part_attribute_valueContext[] part_attribute_value() {
			return GetRuleContexts<Part_attribute_valueContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Part_attribute_valueContext part_attribute_value(int i) {
			return GetRuleContext<Part_attribute_valueContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Numeric_attribute_valueContext[] numeric_attribute_value() {
			return GetRuleContexts<Numeric_attribute_valueContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Numeric_attribute_valueContext numeric_attribute_value(int i) {
			return GetRuleContext<Numeric_attribute_valueContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Currency_attribute_valueContext[] currency_attribute_value() {
			return GetRuleContexts<Currency_attribute_valueContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Currency_attribute_valueContext currency_attribute_value(int i) {
			return GetRuleContext<Currency_attribute_valueContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Attribute_enumContext[] attribute_enum() {
			return GetRuleContexts<Attribute_enumContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Attribute_enumContext attribute_enum(int i) {
			return GetRuleContext<Attribute_enumContext>(i);
		}
		public Parenthesized_valueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parenthesized_value; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICougarParserListener typedListener = listener as ICougarParserListener;
			if (typedListener != null) typedListener.EnterParenthesized_value(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICougarParserListener typedListener = listener as ICougarParserListener;
			if (typedListener != null) typedListener.ExitParenthesized_value(this);
		}
	}

	[RuleVersion(0)]
	public Parenthesized_valueContext parenthesized_value() {
		Parenthesized_valueContext _localctx = new Parenthesized_valueContext(Context, State);
		EnterRule(_localctx, 138, RULE_parenthesized_value);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 708;
			Match(ATTRIBUTE_OPEN_BRACE);
			State = 713;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				State = 713;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case ATTRIBUTE_QUOTED_VALUE:
				case HASH_ATTRIBUTE_VALUE:
				case QUESTION_ATTRIBUTE_VALUE:
				case OPERATOR_ATTRIBUTE_VALUE:
				case MEMBER_REFERENCE:
				case ATTRIBUTE_VALUE:
				case ATTRIBUTE_COLON:
					{
					State = 709;
					part_attribute_value();
					}
					break;
				case NUMERIC_ATTR_VALUE:
					{
					State = 710;
					numeric_attribute_value();
					}
					break;
				case CURRENCY_VALUE:
					{
					State = 711;
					currency_attribute_value();
					}
					break;
				case ATTRIBUTE_ENUM:
					{
					State = 712;
					attribute_enum();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 715;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( ((((_la - 59)) & ~0x3f) == 0 && ((1L << (_la - 59)) & 1535L) != 0) );
			State = 717;
			Match(ATTRIBUTE_CLOSE_BRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Currency_attribute_valueContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CURRENCY_VALUE() { return GetToken(CougarParser.CURRENCY_VALUE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Numeric_attribute_valueContext numeric_attribute_value() {
			return GetRuleContext<Numeric_attribute_valueContext>(0);
		}
		public Currency_attribute_valueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_currency_attribute_value; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICougarParserListener typedListener = listener as ICougarParserListener;
			if (typedListener != null) typedListener.EnterCurrency_attribute_value(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICougarParserListener typedListener = listener as ICougarParserListener;
			if (typedListener != null) typedListener.ExitCurrency_attribute_value(this);
		}
	}

	[RuleVersion(0)]
	public Currency_attribute_valueContext currency_attribute_value() {
		Currency_attribute_valueContext _localctx = new Currency_attribute_valueContext(Context, State);
		EnterRule(_localctx, 140, RULE_currency_attribute_value);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 719;
			Match(CURRENCY_VALUE);
			State = 721;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,78,Context) ) {
			case 1:
				{
				State = 720;
				numeric_attribute_value();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Numeric_attribute_valueContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUMERIC_ATTR_VALUE() { return GetToken(CougarParser.NUMERIC_ATTR_VALUE, 0); }
		public Numeric_attribute_valueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_numeric_attribute_value; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICougarParserListener typedListener = listener as ICougarParserListener;
			if (typedListener != null) typedListener.EnterNumeric_attribute_value(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICougarParserListener typedListener = listener as ICougarParserListener;
			if (typedListener != null) typedListener.ExitNumeric_attribute_value(this);
		}
	}

	[RuleVersion(0)]
	public Numeric_attribute_valueContext numeric_attribute_value() {
		Numeric_attribute_valueContext _localctx = new Numeric_attribute_valueContext(Context, State);
		EnterRule(_localctx, 142, RULE_numeric_attribute_value);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 723;
			Match(NUMERIC_ATTR_VALUE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Attribute_enumContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ATTRIBUTE_ENUM() { return GetToken(CougarParser.ATTRIBUTE_ENUM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Part_attribute_valueContext[] part_attribute_value() {
			return GetRuleContexts<Part_attribute_valueContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Part_attribute_valueContext part_attribute_value(int i) {
			return GetRuleContext<Part_attribute_valueContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Numeric_attribute_valueContext[] numeric_attribute_value() {
			return GetRuleContexts<Numeric_attribute_valueContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Numeric_attribute_valueContext numeric_attribute_value(int i) {
			return GetRuleContext<Numeric_attribute_valueContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Currency_attribute_valueContext[] currency_attribute_value() {
			return GetRuleContexts<Currency_attribute_valueContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Currency_attribute_valueContext currency_attribute_value(int i) {
			return GetRuleContext<Currency_attribute_valueContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PERIOD() { return GetToken(CougarParser.PERIOD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENUM_SEPARATOR() { return GetToken(CougarParser.ENUM_SEPARATOR, 0); }
		public Attribute_enumContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_attribute_enum; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICougarParserListener typedListener = listener as ICougarParserListener;
			if (typedListener != null) typedListener.EnterAttribute_enum(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICougarParserListener typedListener = listener as ICougarParserListener;
			if (typedListener != null) typedListener.ExitAttribute_enum(this);
		}
	}

	[RuleVersion(0)]
	public Attribute_enumContext attribute_enum() {
		Attribute_enumContext _localctx = new Attribute_enumContext(Context, State);
		EnterRule(_localctx, 144, RULE_attribute_enum);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 725;
			Match(ATTRIBUTE_ENUM);
			State = 731;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,80,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					State = 729;
					ErrorHandler.Sync(this);
					switch (TokenStream.LA(1)) {
					case ATTRIBUTE_QUOTED_VALUE:
					case HASH_ATTRIBUTE_VALUE:
					case QUESTION_ATTRIBUTE_VALUE:
					case OPERATOR_ATTRIBUTE_VALUE:
					case MEMBER_REFERENCE:
					case ATTRIBUTE_VALUE:
					case ATTRIBUTE_COLON:
						{
						State = 726;
						part_attribute_value();
						}
						break;
					case NUMERIC_ATTR_VALUE:
						{
						State = 727;
						numeric_attribute_value();
						}
						break;
					case CURRENCY_VALUE:
						{
						State = 728;
						currency_attribute_value();
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					} 
				}
				State = 733;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,80,Context);
			}
			State = 735;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,81,Context) ) {
			case 1:
				{
				State = 734;
				Match(PERIOD);
				}
				break;
			}
			State = 738;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ENUM_SEPARATOR) {
				{
				State = 737;
				Match(ENUM_SEPARATOR);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Part_attribute_valueContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ATTRIBUTE_VALUE() { return GetToken(CougarParser.ATTRIBUTE_VALUE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ATTRIBUTE_QUOTED_VALUE() { return GetToken(CougarParser.ATTRIBUTE_QUOTED_VALUE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ATTRIBUTE_COLON() { return GetToken(CougarParser.ATTRIBUTE_COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HASH_ATTRIBUTE_VALUE() { return GetToken(CougarParser.HASH_ATTRIBUTE_VALUE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode QUESTION_ATTRIBUTE_VALUE() { return GetToken(CougarParser.QUESTION_ATTRIBUTE_VALUE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPERATOR_ATTRIBUTE_VALUE() { return GetToken(CougarParser.OPERATOR_ATTRIBUTE_VALUE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MEMBER_REFERENCE() { return GetToken(CougarParser.MEMBER_REFERENCE, 0); }
		public Part_attribute_valueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_part_attribute_value; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICougarParserListener typedListener = listener as ICougarParserListener;
			if (typedListener != null) typedListener.EnterPart_attribute_value(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICougarParserListener typedListener = listener as ICougarParserListener;
			if (typedListener != null) typedListener.ExitPart_attribute_value(this);
		}
	}

	[RuleVersion(0)]
	public Part_attribute_valueContext part_attribute_value() {
		Part_attribute_valueContext _localctx = new Part_attribute_valueContext(Context, State);
		EnterRule(_localctx, 146, RULE_part_attribute_value);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 740;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 62)) & ~0x3f) == 0 && ((1L << (_la - 62)) & 191L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Attibute_keyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ATTRIBUTE_VALUE() { return GetToken(CougarParser.ATTRIBUTE_VALUE, 0); }
		public Attibute_keyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_attibute_key; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICougarParserListener typedListener = listener as ICougarParserListener;
			if (typedListener != null) typedListener.EnterAttibute_key(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICougarParserListener typedListener = listener as ICougarParserListener;
			if (typedListener != null) typedListener.ExitAttibute_key(this);
		}
	}

	[RuleVersion(0)]
	public Attibute_keyContext attibute_key() {
		Attibute_keyContext _localctx = new Attibute_keyContext(Context, State);
		EnterRule(_localctx, 148, RULE_attibute_key);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 742;
			Match(ATTRIBUTE_VALUE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Member_nameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Message_nameContext message_name() {
			return GetRuleContext<Message_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MEMBER_NAME() { return GetToken(CougarParser.MEMBER_NAME, 0); }
		public Member_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_member_name; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICougarParserListener typedListener = listener as ICougarParserListener;
			if (typedListener != null) typedListener.EnterMember_name(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICougarParserListener typedListener = listener as ICougarParserListener;
			if (typedListener != null) typedListener.ExitMember_name(this);
		}
	}

	[RuleVersion(0)]
	public Member_nameContext member_name() {
		Member_nameContext _localctx = new Member_nameContext(Context, State);
		EnterRule(_localctx, 150, RULE_member_name);
		try {
			State = 746;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case NAME:
				EnterOuterAlt(_localctx, 1);
				{
				State = 744;
				message_name();
				}
				break;
			case MEMBER_NAME:
				EnterOuterAlt(_localctx, 2);
				{
				State = 745;
				Match(MEMBER_NAME);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Vector_typeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STD() { return GetToken(CougarParser.STD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VECTOR() { return GetToken(CougarParser.VECTOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_ANG_BRACE() { return GetToken(CougarParser.OPEN_ANG_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Type_nameContext type_name() {
			return GetRuleContext<Type_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_ANG_BRACE() { return GetToken(CougarParser.CLOSE_ANG_BRACE, 0); }
		public Vector_typeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_vector_type; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICougarParserListener typedListener = listener as ICougarParserListener;
			if (typedListener != null) typedListener.EnterVector_type(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICougarParserListener typedListener = listener as ICougarParserListener;
			if (typedListener != null) typedListener.ExitVector_type(this);
		}
	}

	[RuleVersion(0)]
	public Vector_typeContext vector_type() {
		Vector_typeContext _localctx = new Vector_typeContext(Context, State);
		EnterRule(_localctx, 152, RULE_vector_type);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 748;
			Match(STD);
			State = 749;
			Match(VECTOR);
			State = 750;
			Match(OPEN_ANG_BRACE);
			State = 751;
			type_name();
			State = 752;
			Match(CLOSE_ANG_BRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class String_typeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STD() { return GetToken(CougarParser.STD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(CougarParser.STRING, 0); }
		public String_typeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_string_type; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICougarParserListener typedListener = listener as ICougarParserListener;
			if (typedListener != null) typedListener.EnterString_type(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICougarParserListener typedListener = listener as ICougarParserListener;
			if (typedListener != null) typedListener.ExitString_type(this);
		}
	}

	[RuleVersion(0)]
	public String_typeContext string_type() {
		String_typeContext _localctx = new String_typeContext(Context, State);
		EnterRule(_localctx, 154, RULE_string_type);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 754;
			Match(STD);
			State = 755;
			Match(STRING);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Map_typeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STD() { return GetToken(CougarParser.STD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MAP() { return GetToken(CougarParser.MAP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_ANG_BRACE() { return GetToken(CougarParser.OPEN_ANG_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Type_nameContext[] type_name() {
			return GetRuleContexts<Type_nameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Type_nameContext type_name(int i) {
			return GetRuleContext<Type_nameContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPE_DELIM() { return GetToken(CougarParser.TYPE_DELIM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_ANG_BRACE() { return GetToken(CougarParser.CLOSE_ANG_BRACE, 0); }
		public Map_typeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_map_type; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICougarParserListener typedListener = listener as ICougarParserListener;
			if (typedListener != null) typedListener.EnterMap_type(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICougarParserListener typedListener = listener as ICougarParserListener;
			if (typedListener != null) typedListener.ExitMap_type(this);
		}
	}

	[RuleVersion(0)]
	public Map_typeContext map_type() {
		Map_typeContext _localctx = new Map_typeContext(Context, State);
		EnterRule(_localctx, 156, RULE_map_type);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 757;
			Match(STD);
			State = 758;
			Match(MAP);
			State = 759;
			Match(OPEN_ANG_BRACE);
			State = 760;
			type_name();
			State = 761;
			Match(TYPE_DELIM);
			State = 762;
			type_name();
			State = 763;
			Match(CLOSE_ANG_BRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Std_typeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Vector_typeContext vector_type() {
			return GetRuleContext<Vector_typeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public String_typeContext string_type() {
			return GetRuleContext<String_typeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Map_typeContext map_type() {
			return GetRuleContext<Map_typeContext>(0);
		}
		public Std_typeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_std_type; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICougarParserListener typedListener = listener as ICougarParserListener;
			if (typedListener != null) typedListener.EnterStd_type(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICougarParserListener typedListener = listener as ICougarParserListener;
			if (typedListener != null) typedListener.ExitStd_type(this);
		}
	}

	[RuleVersion(0)]
	public Std_typeContext std_type() {
		Std_typeContext _localctx = new Std_typeContext(Context, State);
		EnterRule(_localctx, 158, RULE_std_type);
		try {
			State = 768;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,84,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 765;
				vector_type();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 766;
				string_type();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 767;
				map_type();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Type_nameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SHORT() { return GetToken(CougarParser.SHORT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INT() { return GetToken(CougarParser.INT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode USHORT() { return GetToken(CougarParser.USHORT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ULONG() { return GetToken(CougarParser.ULONG, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHAR() { return GetToken(CougarParser.CHAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BOOL() { return GetToken(CougarParser.BOOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DWORD() { return GetToken(CougarParser.DWORD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FILETIME() { return GetToken(CougarParser.FILETIME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BYTE() { return GetToken(CougarParser.BYTE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FLOAT() { return GetToken(CougarParser.FLOAT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOUBLE() { return GetToken(CougarParser.DOUBLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LONGLONG() { return GetToken(CougarParser.LONGLONG, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LONG() { return GetToken(CougarParser.LONG, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Std_typeContext std_type() {
			return GetRuleContext<Std_typeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Message_nameContext message_name() {
			return GetRuleContext<Message_nameContext>(0);
		}
		public Type_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type_name; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICougarParserListener typedListener = listener as ICougarParserListener;
			if (typedListener != null) typedListener.EnterType_name(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICougarParserListener typedListener = listener as ICougarParserListener;
			if (typedListener != null) typedListener.ExitType_name(this);
		}
	}

	[RuleVersion(0)]
	public Type_nameContext type_name() {
		Type_nameContext _localctx = new Type_nameContext(Context, State);
		EnterRule(_localctx, 160, RULE_type_name);
		try {
			State = 785;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case SHORT:
				EnterOuterAlt(_localctx, 1);
				{
				State = 770;
				Match(SHORT);
				}
				break;
			case INT:
				EnterOuterAlt(_localctx, 2);
				{
				State = 771;
				Match(INT);
				}
				break;
			case USHORT:
				EnterOuterAlt(_localctx, 3);
				{
				State = 772;
				Match(USHORT);
				}
				break;
			case ULONG:
				EnterOuterAlt(_localctx, 4);
				{
				State = 773;
				Match(ULONG);
				}
				break;
			case CHAR:
				EnterOuterAlt(_localctx, 5);
				{
				State = 774;
				Match(CHAR);
				}
				break;
			case BOOL:
				EnterOuterAlt(_localctx, 6);
				{
				State = 775;
				Match(BOOL);
				}
				break;
			case DWORD:
				EnterOuterAlt(_localctx, 7);
				{
				State = 776;
				Match(DWORD);
				}
				break;
			case FILETIME:
				EnterOuterAlt(_localctx, 8);
				{
				State = 777;
				Match(FILETIME);
				}
				break;
			case BYTE:
				EnterOuterAlt(_localctx, 9);
				{
				State = 778;
				Match(BYTE);
				}
				break;
			case FLOAT:
				EnterOuterAlt(_localctx, 10);
				{
				State = 779;
				Match(FLOAT);
				}
				break;
			case DOUBLE:
				EnterOuterAlt(_localctx, 11);
				{
				State = 780;
				Match(DOUBLE);
				}
				break;
			case LONGLONG:
				EnterOuterAlt(_localctx, 12);
				{
				State = 781;
				Match(LONGLONG);
				}
				break;
			case LONG:
				EnterOuterAlt(_localctx, 13);
				{
				State = 782;
				Match(LONG);
				}
				break;
			case STD:
				EnterOuterAlt(_localctx, 14);
				{
				State = 783;
				std_type();
				}
				break;
			case NAME:
				EnterOuterAlt(_localctx, 15);
				{
				State = 784;
				message_name();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Message_nameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAME() { return GetToken(CougarParser.NAME, 0); }
		public Message_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_message_name; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICougarParserListener typedListener = listener as ICougarParserListener;
			if (typedListener != null) typedListener.EnterMessage_name(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICougarParserListener typedListener = listener as ICougarParserListener;
			if (typedListener != null) typedListener.ExitMessage_name(this);
		}
	}

	[RuleVersion(0)]
	public Message_nameContext message_name() {
		Message_nameContext _localctx = new Message_nameContext(Context, State);
		EnterRule(_localctx, 162, RULE_message_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 787;
			Match(NAME);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Const_valueContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Expression_defineContext expression_define() {
			return GetRuleContext<Expression_defineContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Const_numeric_valueContext const_numeric_value() {
			return GetRuleContext<Const_numeric_valueContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Const_expressionContext const_expression() {
			return GetRuleContext<Const_expressionContext>(0);
		}
		public Const_valueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_const_value; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICougarParserListener typedListener = listener as ICougarParserListener;
			if (typedListener != null) typedListener.EnterConst_value(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICougarParserListener typedListener = listener as ICougarParserListener;
			if (typedListener != null) typedListener.ExitConst_value(this);
		}
	}

	[RuleVersion(0)]
	public Const_valueContext const_value() {
		Const_valueContext _localctx = new Const_valueContext(Context, State);
		EnterRule(_localctx, 164, RULE_const_value);
		try {
			State = 792;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,86,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 789;
				expression_define();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 790;
				const_numeric_value();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 791;
				const_expression();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Const_expressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Expression_operatorContext expression_operator() {
			return GetRuleContext<Expression_operatorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Const_numeric_valueContext[] const_numeric_value() {
			return GetRuleContexts<Const_numeric_valueContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Const_numeric_valueContext const_numeric_value(int i) {
			return GetRuleContext<Const_numeric_valueContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Expression_defineContext expression_define() {
			return GetRuleContext<Expression_defineContext>(0);
		}
		public Const_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_const_expression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICougarParserListener typedListener = listener as ICougarParserListener;
			if (typedListener != null) typedListener.EnterConst_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICougarParserListener typedListener = listener as ICougarParserListener;
			if (typedListener != null) typedListener.ExitConst_expression(this);
		}
	}

	[RuleVersion(0)]
	public Const_expressionContext const_expression() {
		Const_expressionContext _localctx = new Const_expressionContext(Context, State);
		EnterRule(_localctx, 166, RULE_const_expression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 796;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case SIZE_VALUE:
				{
				State = 794;
				expression_define();
				}
				break;
			case CONST_NUMBER:
				{
				State = 795;
				const_numeric_value();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 798;
			expression_operator();
			State = 799;
			const_numeric_value();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Expression_defineContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SIZE_VALUE() { return GetTokens(CougarParser.SIZE_VALUE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SIZE_VALUE(int i) {
			return GetToken(CougarParser.SIZE_VALUE, i);
		}
		public Expression_defineContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression_define; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICougarParserListener typedListener = listener as ICougarParserListener;
			if (typedListener != null) typedListener.EnterExpression_define(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICougarParserListener typedListener = listener as ICougarParserListener;
			if (typedListener != null) typedListener.ExitExpression_define(this);
		}
	}

	[RuleVersion(0)]
	public Expression_defineContext expression_define() {
		Expression_defineContext _localctx = new Expression_defineContext(Context, State);
		EnterRule(_localctx, 168, RULE_expression_define);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 802;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 801;
				Match(SIZE_VALUE);
				}
				}
				State = 804;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==SIZE_VALUE );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Expression_operatorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPERATOR() { return GetToken(CougarParser.OPERATOR, 0); }
		public Expression_operatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression_operator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICougarParserListener typedListener = listener as ICougarParserListener;
			if (typedListener != null) typedListener.EnterExpression_operator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICougarParserListener typedListener = listener as ICougarParserListener;
			if (typedListener != null) typedListener.ExitExpression_operator(this);
		}
	}

	[RuleVersion(0)]
	public Expression_operatorContext expression_operator() {
		Expression_operatorContext _localctx = new Expression_operatorContext(Context, State);
		EnterRule(_localctx, 170, RULE_expression_operator);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 806;
			Match(OPERATOR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Const_numeric_valueContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONST_NUMBER() { return GetToken(CougarParser.CONST_NUMBER, 0); }
		public Const_numeric_valueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_const_numeric_value; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICougarParserListener typedListener = listener as ICougarParserListener;
			if (typedListener != null) typedListener.EnterConst_numeric_value(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICougarParserListener typedListener = listener as ICougarParserListener;
			if (typedListener != null) typedListener.ExitConst_numeric_value(this);
		}
	}

	[RuleVersion(0)]
	public Const_numeric_valueContext const_numeric_value() {
		Const_numeric_valueContext _localctx = new Const_numeric_valueContext(Context, State);
		EnterRule(_localctx, 172, RULE_const_numeric_value);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 808;
			Match(CONST_NUMBER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Attribute_extensionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MSG_COMMENT() { return GetToken(CougarParser.MSG_COMMENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MSG_END() { return GetToken(CougarParser.MSG_END, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Attribute_extension_contentContext attribute_extension_content() {
			return GetRuleContext<Attribute_extension_contentContext>(0);
		}
		public Attribute_extensionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_attribute_extension; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICougarParserListener typedListener = listener as ICougarParserListener;
			if (typedListener != null) typedListener.EnterAttribute_extension(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICougarParserListener typedListener = listener as ICougarParserListener;
			if (typedListener != null) typedListener.ExitAttribute_extension(this);
		}
	}

	[RuleVersion(0)]
	public Attribute_extensionContext attribute_extension() {
		Attribute_extensionContext _localctx = new Attribute_extensionContext(Context, State);
		EnterRule(_localctx, 174, RULE_attribute_extension);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 810;
			Match(MSG_COMMENT);
			State = 812;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (((((_la - 148)) & ~0x3f) == 0 && ((1L << (_la - 148)) & 223L) != 0)) {
				{
				State = 811;
				attribute_extension_content();
				}
			}

			State = 814;
			Match(MSG_END);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Attribute_extension_contentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Attribute_extension_content_valueContext[] attribute_extension_content_value() {
			return GetRuleContexts<Attribute_extension_content_valueContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Attribute_extension_content_valueContext attribute_extension_content_value(int i) {
			return GetRuleContext<Attribute_extension_content_valueContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Attribute_extension_parenthesized_valueContext[] attribute_extension_parenthesized_value() {
			return GetRuleContexts<Attribute_extension_parenthesized_valueContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Attribute_extension_parenthesized_valueContext attribute_extension_parenthesized_value(int i) {
			return GetRuleContext<Attribute_extension_parenthesized_valueContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MSG_PERIOD() { return GetToken(CougarParser.MSG_PERIOD, 0); }
		public Attribute_extension_contentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_attribute_extension_content; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICougarParserListener typedListener = listener as ICougarParserListener;
			if (typedListener != null) typedListener.EnterAttribute_extension_content(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICougarParserListener typedListener = listener as ICougarParserListener;
			if (typedListener != null) typedListener.ExitAttribute_extension_content(this);
		}
	}

	[RuleVersion(0)]
	public Attribute_extension_contentContext attribute_extension_content() {
		Attribute_extension_contentContext _localctx = new Attribute_extension_contentContext(Context, State);
		EnterRule(_localctx, 176, RULE_attribute_extension_content);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 818;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					State = 818;
					ErrorHandler.Sync(this);
					switch (TokenStream.LA(1)) {
					case MSG_WORD:
					case MSG_CURRENCY_VALUE:
					case MSG_NUMBER:
					case MSG_PERIOD:
					case MSG_COLON:
					case MSG_UNKNOWN:
						{
						State = 816;
						attribute_extension_content_value();
						}
						break;
					case MSG_OPEN_BRACE:
						{
						State = 817;
						attribute_extension_parenthesized_value();
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 820;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,91,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			State = 823;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,92,Context) ) {
			case 1:
				{
				State = 822;
				Match(MSG_PERIOD);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Attribute_extension_content_valueContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MSG_PERIOD() { return GetToken(CougarParser.MSG_PERIOD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MSG_WORD() { return GetToken(CougarParser.MSG_WORD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MSG_NUMBER() { return GetToken(CougarParser.MSG_NUMBER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MSG_CURRENCY_VALUE() { return GetToken(CougarParser.MSG_CURRENCY_VALUE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MSG_UNKNOWN() { return GetToken(CougarParser.MSG_UNKNOWN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MSG_COLON() { return GetToken(CougarParser.MSG_COLON, 0); }
		public Attribute_extension_content_valueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_attribute_extension_content_value; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICougarParserListener typedListener = listener as ICougarParserListener;
			if (typedListener != null) typedListener.EnterAttribute_extension_content_value(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICougarParserListener typedListener = listener as ICougarParserListener;
			if (typedListener != null) typedListener.ExitAttribute_extension_content_value(this);
		}
	}

	[RuleVersion(0)]
	public Attribute_extension_content_valueContext attribute_extension_content_value() {
		Attribute_extension_content_valueContext _localctx = new Attribute_extension_content_valueContext(Context, State);
		EnterRule(_localctx, 178, RULE_attribute_extension_content_value);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 825;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 148)) & ~0x3f) == 0 && ((1L << (_la - 148)) & 207L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Attribute_extension_parenthesized_valueContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MSG_OPEN_BRACE() { return GetToken(CougarParser.MSG_OPEN_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MSG_CLOSE_BRACE() { return GetToken(CougarParser.MSG_CLOSE_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Attribute_extension_contentContext[] attribute_extension_content() {
			return GetRuleContexts<Attribute_extension_contentContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Attribute_extension_contentContext attribute_extension_content(int i) {
			return GetRuleContext<Attribute_extension_contentContext>(i);
		}
		public Attribute_extension_parenthesized_valueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_attribute_extension_parenthesized_value; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICougarParserListener typedListener = listener as ICougarParserListener;
			if (typedListener != null) typedListener.EnterAttribute_extension_parenthesized_value(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICougarParserListener typedListener = listener as ICougarParserListener;
			if (typedListener != null) typedListener.ExitAttribute_extension_parenthesized_value(this);
		}
	}

	[RuleVersion(0)]
	public Attribute_extension_parenthesized_valueContext attribute_extension_parenthesized_value() {
		Attribute_extension_parenthesized_valueContext _localctx = new Attribute_extension_parenthesized_valueContext(Context, State);
		EnterRule(_localctx, 180, RULE_attribute_extension_parenthesized_value);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 827;
			Match(MSG_OPEN_BRACE);
			State = 829;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 828;
				attribute_extension_content();
				}
				}
				State = 831;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( ((((_la - 148)) & ~0x3f) == 0 && ((1L << (_la - 148)) & 223L) != 0) );
			State = 833;
			Match(MSG_CLOSE_BRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Macro_blockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public MacroContext[] macro() {
			return GetRuleContexts<MacroContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public MacroContext macro(int i) {
			return GetRuleContext<MacroContext>(i);
		}
		public Macro_blockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_macro_block; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICougarParserListener typedListener = listener as ICougarParserListener;
			if (typedListener != null) typedListener.EnterMacro_block(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICougarParserListener typedListener = listener as ICougarParserListener;
			if (typedListener != null) typedListener.ExitMacro_block(this);
		}
	}

	[RuleVersion(0)]
	public Macro_blockContext macro_block() {
		Macro_blockContext _localctx = new Macro_blockContext(Context, State);
		EnterRule(_localctx, 182, RULE_macro_block);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 836;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 835;
					macro();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 838;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,94,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MacroContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MACRO_END() { return GetToken(CougarParser.MACRO_END, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(CougarParser.Eof, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Macro_defineContext macro_define() {
			return GetRuleContext<Macro_defineContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Macro_includeContext macro_include() {
			return GetRuleContext<Macro_includeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Macro_pragmaContext macro_pragma() {
			return GetRuleContext<Macro_pragmaContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Macro_ifndefContext macro_ifndef() {
			return GetRuleContext<Macro_ifndefContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Macro_ifContext macro_if() {
			return GetRuleContext<Macro_ifContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Macro_endifContext macro_endif() {
			return GetRuleContext<Macro_endifContext>(0);
		}
		public MacroContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_macro; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICougarParserListener typedListener = listener as ICougarParserListener;
			if (typedListener != null) typedListener.EnterMacro(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICougarParserListener typedListener = listener as ICougarParserListener;
			if (typedListener != null) typedListener.ExitMacro(this);
		}
	}

	[RuleVersion(0)]
	public MacroContext macro() {
		MacroContext _localctx = new MacroContext(Context, State);
		EnterRule(_localctx, 184, RULE_macro);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 846;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,95,Context) ) {
			case 1:
				{
				State = 840;
				macro_define();
				}
				break;
			case 2:
				{
				State = 841;
				macro_include();
				}
				break;
			case 3:
				{
				State = 842;
				macro_pragma();
				}
				break;
			case 4:
				{
				State = 843;
				macro_ifndef();
				}
				break;
			case 5:
				{
				State = 844;
				macro_if();
				}
				break;
			case 6:
				{
				State = 845;
				macro_endif();
				}
				break;
			}
			State = 848;
			_la = TokenStream.LA(1);
			if ( !(_la==Eof || _la==MACRO_END) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Macro_defineContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HASH_MACRO() { return GetToken(CougarParser.HASH_MACRO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFINE() { return GetToken(CougarParser.DEFINE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Define_nameContext define_name() {
			return GetRuleContext<Define_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Define_valueContext define_value() {
			return GetRuleContext<Define_valueContext>(0);
		}
		public Macro_defineContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_macro_define; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICougarParserListener typedListener = listener as ICougarParserListener;
			if (typedListener != null) typedListener.EnterMacro_define(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICougarParserListener typedListener = listener as ICougarParserListener;
			if (typedListener != null) typedListener.ExitMacro_define(this);
		}
	}

	[RuleVersion(0)]
	public Macro_defineContext macro_define() {
		Macro_defineContext _localctx = new Macro_defineContext(Context, State);
		EnterRule(_localctx, 186, RULE_macro_define);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 850;
			Match(HASH_MACRO);
			State = 851;
			Match(DEFINE);
			State = 852;
			define_name();
			State = 854;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (((((_la - 164)) & ~0x3f) == 0 && ((1L << (_la - 164)) & 402653953L) != 0)) {
				{
				State = 853;
				define_value();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Define_nameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MACRO_NAME() { return GetToken(CougarParser.MACRO_NAME, 0); }
		public Define_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_define_name; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICougarParserListener typedListener = listener as ICougarParserListener;
			if (typedListener != null) typedListener.EnterDefine_name(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICougarParserListener typedListener = listener as ICougarParserListener;
			if (typedListener != null) typedListener.ExitDefine_name(this);
		}
	}

	[RuleVersion(0)]
	public Define_nameContext define_name() {
		Define_nameContext _localctx = new Define_nameContext(Context, State);
		EnterRule(_localctx, 188, RULE_define_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 856;
			Match(MACRO_NAME);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Define_valueContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Numeric_valueContext numeric_value() {
			return GetRuleContext<Numeric_valueContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Hex_numeric_valueContext hex_numeric_value() {
			return GetRuleContext<Hex_numeric_valueContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Quoted_stringContext quoted_string() {
			return GetRuleContext<Quoted_stringContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Macro_exprContext macro_expr() {
			return GetRuleContext<Macro_exprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Macro_nameContext macro_name() {
			return GetRuleContext<Macro_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MACRO_OPEN() { return GetToken(CougarParser.MACRO_OPEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MACRO_CLOSE() { return GetToken(CougarParser.MACRO_CLOSE, 0); }
		public Define_valueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_define_value; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICougarParserListener typedListener = listener as ICougarParserListener;
			if (typedListener != null) typedListener.EnterDefine_value(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICougarParserListener typedListener = listener as ICougarParserListener;
			if (typedListener != null) typedListener.ExitDefine_value(this);
		}
	}

	[RuleVersion(0)]
	public Define_valueContext define_value() {
		Define_valueContext _localctx = new Define_valueContext(Context, State);
		EnterRule(_localctx, 190, RULE_define_value);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 859;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==MACRO_OPEN) {
				{
				State = 858;
				Match(MACRO_OPEN);
				}
			}

			State = 866;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,98,Context) ) {
			case 1:
				{
				State = 861;
				numeric_value();
				}
				break;
			case 2:
				{
				State = 862;
				hex_numeric_value();
				}
				break;
			case 3:
				{
				State = 863;
				quoted_string();
				}
				break;
			case 4:
				{
				State = 864;
				macro_expr();
				}
				break;
			case 5:
				{
				State = 865;
				macro_name();
				}
				break;
			}
			State = 869;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==MACRO_CLOSE) {
				{
				State = 868;
				Match(MACRO_CLOSE);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Macro_nameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MACRO_NAME() { return GetToken(CougarParser.MACRO_NAME, 0); }
		public Macro_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_macro_name; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICougarParserListener typedListener = listener as ICougarParserListener;
			if (typedListener != null) typedListener.EnterMacro_name(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICougarParserListener typedListener = listener as ICougarParserListener;
			if (typedListener != null) typedListener.ExitMacro_name(this);
		}
	}

	[RuleVersion(0)]
	public Macro_nameContext macro_name() {
		Macro_nameContext _localctx = new Macro_nameContext(Context, State);
		EnterRule(_localctx, 192, RULE_macro_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 871;
			Match(MACRO_NAME);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Macro_exprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Macro_nameContext[] macro_name() {
			return GetRuleContexts<Macro_nameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Macro_nameContext macro_name(int i) {
			return GetRuleContext<Macro_nameContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Macro_operatorContext[] macro_operator() {
			return GetRuleContexts<Macro_operatorContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Macro_operatorContext macro_operator(int i) {
			return GetRuleContext<Macro_operatorContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Numeric_valueContext[] numeric_value() {
			return GetRuleContexts<Numeric_valueContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Numeric_valueContext numeric_value(int i) {
			return GetRuleContext<Numeric_valueContext>(i);
		}
		public Macro_exprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_macro_expr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICougarParserListener typedListener = listener as ICougarParserListener;
			if (typedListener != null) typedListener.EnterMacro_expr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICougarParserListener typedListener = listener as ICougarParserListener;
			if (typedListener != null) typedListener.ExitMacro_expr(this);
		}
	}

	[RuleVersion(0)]
	public Macro_exprContext macro_expr() {
		Macro_exprContext _localctx = new Macro_exprContext(Context, State);
		EnterRule(_localctx, 194, RULE_macro_expr);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 879;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 873;
				macro_name();
				State = 874;
				macro_operator();
				State = 877;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case MACRO_NAME:
					{
					State = 875;
					macro_name();
					}
					break;
				case MACRO_NUMBER:
					{
					State = 876;
					numeric_value();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				}
				State = 881;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==MACRO_NAME );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Numeric_valueContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] MACRO_NUMBER() { return GetTokens(CougarParser.MACRO_NUMBER); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MACRO_NUMBER(int i) {
			return GetToken(CougarParser.MACRO_NUMBER, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Macro_operatorContext[] macro_operator() {
			return GetRuleContexts<Macro_operatorContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Macro_operatorContext macro_operator(int i) {
			return GetRuleContext<Macro_operatorContext>(i);
		}
		public Numeric_valueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_numeric_value; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICougarParserListener typedListener = listener as ICougarParserListener;
			if (typedListener != null) typedListener.EnterNumeric_value(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICougarParserListener typedListener = listener as ICougarParserListener;
			if (typedListener != null) typedListener.ExitNumeric_value(this);
		}
	}

	[RuleVersion(0)]
	public Numeric_valueContext numeric_value() {
		Numeric_valueContext _localctx = new Numeric_valueContext(Context, State);
		EnterRule(_localctx, 196, RULE_numeric_value);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 883;
			Match(MACRO_NUMBER);
			State = 889;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==MACRO_PLUS || _la==MACRO_MINUS) {
				{
				{
				State = 884;
				macro_operator();
				State = 885;
				Match(MACRO_NUMBER);
				}
				}
				State = 891;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Macro_operatorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MACRO_PLUS() { return GetToken(CougarParser.MACRO_PLUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MACRO_MINUS() { return GetToken(CougarParser.MACRO_MINUS, 0); }
		public Macro_operatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_macro_operator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICougarParserListener typedListener = listener as ICougarParserListener;
			if (typedListener != null) typedListener.EnterMacro_operator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICougarParserListener typedListener = listener as ICougarParserListener;
			if (typedListener != null) typedListener.ExitMacro_operator(this);
		}
	}

	[RuleVersion(0)]
	public Macro_operatorContext macro_operator() {
		Macro_operatorContext _localctx = new Macro_operatorContext(Context, State);
		EnterRule(_localctx, 198, RULE_macro_operator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 892;
			_la = TokenStream.LA(1);
			if ( !(_la==MACRO_PLUS || _la==MACRO_MINUS) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Hex_numeric_valueContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MACRO_HEX_NUMBER() { return GetToken(CougarParser.MACRO_HEX_NUMBER, 0); }
		public Hex_numeric_valueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_hex_numeric_value; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICougarParserListener typedListener = listener as ICougarParserListener;
			if (typedListener != null) typedListener.EnterHex_numeric_value(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICougarParserListener typedListener = listener as ICougarParserListener;
			if (typedListener != null) typedListener.ExitHex_numeric_value(this);
		}
	}

	[RuleVersion(0)]
	public Hex_numeric_valueContext hex_numeric_value() {
		Hex_numeric_valueContext _localctx = new Hex_numeric_valueContext(Context, State);
		EnterRule(_localctx, 200, RULE_hex_numeric_value);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 894;
			Match(MACRO_HEX_NUMBER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Macro_includeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HASH_MACRO() { return GetToken(CougarParser.HASH_MACRO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INCLUDE() { return GetToken(CougarParser.INCLUDE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Quoted_stringContext quoted_string() {
			return GetRuleContext<Quoted_stringContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Include_nameContext include_name() {
			return GetRuleContext<Include_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MACRO_OPEN_ANGLE_BRACE() { return GetToken(CougarParser.MACRO_OPEN_ANGLE_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MACRO_CLOSE_ANGLE_BRACE() { return GetToken(CougarParser.MACRO_CLOSE_ANGLE_BRACE, 0); }
		public Macro_includeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_macro_include; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICougarParserListener typedListener = listener as ICougarParserListener;
			if (typedListener != null) typedListener.EnterMacro_include(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICougarParserListener typedListener = listener as ICougarParserListener;
			if (typedListener != null) typedListener.ExitMacro_include(this);
		}
	}

	[RuleVersion(0)]
	public Macro_includeContext macro_include() {
		Macro_includeContext _localctx = new Macro_includeContext(Context, State);
		EnterRule(_localctx, 202, RULE_macro_include);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 896;
			Match(HASH_MACRO);
			State = 897;
			Match(INCLUDE);
			State = 903;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case MACRO_QUOTED_STRING:
				{
				State = 898;
				quoted_string();
				}
				break;
			case MACRO_OPEN_ANGLE_BRACE:
				{
				{
				{
				State = 899;
				Match(MACRO_OPEN_ANGLE_BRACE);
				}
				State = 900;
				include_name();
				{
				State = 901;
				Match(MACRO_CLOSE_ANGLE_BRACE);
				}
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Include_nameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MACRO_NAME() { return GetToken(CougarParser.MACRO_NAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HEADER_EXTENSION() { return GetToken(CougarParser.HEADER_EXTENSION, 0); }
		public Include_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_include_name; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICougarParserListener typedListener = listener as ICougarParserListener;
			if (typedListener != null) typedListener.EnterInclude_name(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICougarParserListener typedListener = listener as ICougarParserListener;
			if (typedListener != null) typedListener.ExitInclude_name(this);
		}
	}

	[RuleVersion(0)]
	public Include_nameContext include_name() {
		Include_nameContext _localctx = new Include_nameContext(Context, State);
		EnterRule(_localctx, 204, RULE_include_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 905;
			Match(MACRO_NAME);
			State = 906;
			Match(HEADER_EXTENSION);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Macro_ifndefContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HASH_MACRO() { return GetToken(CougarParser.HASH_MACRO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IFNDEF() { return GetToken(CougarParser.IFNDEF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MACRO_NAME() { return GetToken(CougarParser.MACRO_NAME, 0); }
		public Macro_ifndefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_macro_ifndef; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICougarParserListener typedListener = listener as ICougarParserListener;
			if (typedListener != null) typedListener.EnterMacro_ifndef(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICougarParserListener typedListener = listener as ICougarParserListener;
			if (typedListener != null) typedListener.ExitMacro_ifndef(this);
		}
	}

	[RuleVersion(0)]
	public Macro_ifndefContext macro_ifndef() {
		Macro_ifndefContext _localctx = new Macro_ifndefContext(Context, State);
		EnterRule(_localctx, 206, RULE_macro_ifndef);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 908;
			Match(HASH_MACRO);
			State = 909;
			Match(IFNDEF);
			State = 910;
			Match(MACRO_NAME);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Macro_ifContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HASH_MACRO() { return GetToken(CougarParser.HASH_MACRO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF() { return GetToken(CougarParser.IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Macro_clauseContext[] macro_clause() {
			return GetRuleContexts<Macro_clauseContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Macro_clauseContext macro_clause(int i) {
			return GetRuleContext<Macro_clauseContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] AND() { return GetTokens(CougarParser.AND); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AND(int i) {
			return GetToken(CougarParser.AND, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] OR() { return GetTokens(CougarParser.OR); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OR(int i) {
			return GetToken(CougarParser.OR, i);
		}
		public Macro_ifContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_macro_if; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICougarParserListener typedListener = listener as ICougarParserListener;
			if (typedListener != null) typedListener.EnterMacro_if(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICougarParserListener typedListener = listener as ICougarParserListener;
			if (typedListener != null) typedListener.ExitMacro_if(this);
		}
	}

	[RuleVersion(0)]
	public Macro_ifContext macro_if() {
		Macro_ifContext _localctx = new Macro_ifContext(Context, State);
		EnterRule(_localctx, 208, RULE_macro_if);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 912;
			Match(HASH_MACRO);
			State = 913;
			Match(IF);
			State = 914;
			macro_clause();
			State = 919;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==AND || _la==OR) {
				{
				{
				State = 915;
				_la = TokenStream.LA(1);
				if ( !(_la==AND || _la==OR) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 916;
				macro_clause();
				}
				}
				State = 921;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Macro_clauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFINED() { return GetToken(CougarParser.DEFINED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MACRO_OPEN() { return GetToken(CougarParser.MACRO_OPEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Define_nameContext define_name() {
			return GetRuleContext<Define_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MACRO_CLOSE() { return GetToken(CougarParser.MACRO_CLOSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MACRO_NOT() { return GetToken(CougarParser.MACRO_NOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Macro_testContext macro_test() {
			return GetRuleContext<Macro_testContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Numeric_valueContext numeric_value() {
			return GetRuleContext<Numeric_valueContext>(0);
		}
		public Macro_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_macro_clause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICougarParserListener typedListener = listener as ICougarParserListener;
			if (typedListener != null) typedListener.EnterMacro_clause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICougarParserListener typedListener = listener as ICougarParserListener;
			if (typedListener != null) typedListener.ExitMacro_clause(this);
		}
	}

	[RuleVersion(0)]
	public Macro_clauseContext macro_clause() {
		Macro_clauseContext _localctx = new Macro_clauseContext(Context, State);
		EnterRule(_localctx, 210, RULE_macro_clause);
		int _la;
		try {
			State = 936;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case MACRO_NOT:
			case DEFINED:
				EnterOuterAlt(_localctx, 1);
				{
				{
				State = 923;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==MACRO_NOT) {
					{
					State = 922;
					Match(MACRO_NOT);
					}
				}

				State = 925;
				Match(DEFINED);
				State = 926;
				Match(MACRO_OPEN);
				State = 927;
				define_name();
				State = 928;
				Match(MACRO_CLOSE);
				}
				}
				break;
			case MACRO_OPEN:
				EnterOuterAlt(_localctx, 2);
				{
				{
				State = 930;
				Match(MACRO_OPEN);
				State = 931;
				define_name();
				State = 932;
				macro_test();
				State = 933;
				numeric_value();
				State = 934;
				Match(MACRO_CLOSE);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Macro_testContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GREATER_THAN_EQUALS() { return GetToken(CougarParser.GREATER_THAN_EQUALS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LESS_THAN_EQUALS() { return GetToken(CougarParser.LESS_THAN_EQUALS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUALS() { return GetToken(CougarParser.EQUALS, 0); }
		public Macro_testContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_macro_test; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICougarParserListener typedListener = listener as ICougarParserListener;
			if (typedListener != null) typedListener.EnterMacro_test(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICougarParserListener typedListener = listener as ICougarParserListener;
			if (typedListener != null) typedListener.ExitMacro_test(this);
		}
	}

	[RuleVersion(0)]
	public Macro_testContext macro_test() {
		Macro_testContext _localctx = new Macro_testContext(Context, State);
		EnterRule(_localctx, 212, RULE_macro_test);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 938;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 174)) & ~0x3f) == 0 && ((1L << (_la - 174)) & 7L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Macro_endifContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HASH_MACRO() { return GetToken(CougarParser.HASH_MACRO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENDIF() { return GetToken(CougarParser.ENDIF, 0); }
		public Macro_endifContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_macro_endif; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICougarParserListener typedListener = listener as ICougarParserListener;
			if (typedListener != null) typedListener.EnterMacro_endif(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICougarParserListener typedListener = listener as ICougarParserListener;
			if (typedListener != null) typedListener.ExitMacro_endif(this);
		}
	}

	[RuleVersion(0)]
	public Macro_endifContext macro_endif() {
		Macro_endifContext _localctx = new Macro_endifContext(Context, State);
		EnterRule(_localctx, 214, RULE_macro_endif);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 940;
			Match(HASH_MACRO);
			State = 941;
			Match(ENDIF);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Macro_pragmaContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HASH_MACRO() { return GetToken(CougarParser.HASH_MACRO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PRAGMA() { return GetToken(CougarParser.PRAGMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ONCE() { return GetToken(CougarParser.ONCE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Pragma_nameContext pragma_name() {
			return GetRuleContext<Pragma_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MACRO_OPEN() { return GetToken(CougarParser.MACRO_OPEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MACRO_CLOSE() { return GetToken(CougarParser.MACRO_CLOSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Pragma_typeContext pragma_type() {
			return GetRuleContext<Pragma_typeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MACRO_COMMA() { return GetToken(CougarParser.MACRO_COMMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Numeric_valueContext numeric_value() {
			return GetRuleContext<Numeric_valueContext>(0);
		}
		public Macro_pragmaContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_macro_pragma; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICougarParserListener typedListener = listener as ICougarParserListener;
			if (typedListener != null) typedListener.EnterMacro_pragma(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICougarParserListener typedListener = listener as ICougarParserListener;
			if (typedListener != null) typedListener.ExitMacro_pragma(this);
		}
	}

	[RuleVersion(0)]
	public Macro_pragmaContext macro_pragma() {
		Macro_pragmaContext _localctx = new Macro_pragmaContext(Context, State);
		EnterRule(_localctx, 216, RULE_macro_pragma);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 943;
			Match(HASH_MACRO);
			State = 944;
			Match(PRAGMA);
			State = 960;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ONCE:
				{
				State = 945;
				Match(ONCE);
				}
				break;
			case MACRO_NAME:
				{
				State = 946;
				pragma_name();
				State = 958;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==MACRO_OPEN) {
					{
					State = 947;
					Match(MACRO_OPEN);
					State = 949;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==MACRO_NAME) {
						{
						State = 948;
						pragma_type();
						}
					}

					State = 952;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==MACRO_COMMA) {
						{
						State = 951;
						Match(MACRO_COMMA);
						}
					}

					State = 955;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==MACRO_NUMBER) {
						{
						State = 954;
						numeric_value();
						}
					}

					State = 957;
					Match(MACRO_CLOSE);
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Pragma_nameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MACRO_NAME() { return GetToken(CougarParser.MACRO_NAME, 0); }
		public Pragma_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pragma_name; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICougarParserListener typedListener = listener as ICougarParserListener;
			if (typedListener != null) typedListener.EnterPragma_name(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICougarParserListener typedListener = listener as ICougarParserListener;
			if (typedListener != null) typedListener.ExitPragma_name(this);
		}
	}

	[RuleVersion(0)]
	public Pragma_nameContext pragma_name() {
		Pragma_nameContext _localctx = new Pragma_nameContext(Context, State);
		EnterRule(_localctx, 218, RULE_pragma_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 962;
			Match(MACRO_NAME);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Pragma_typeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MACRO_NAME() { return GetToken(CougarParser.MACRO_NAME, 0); }
		public Pragma_typeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pragma_type; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICougarParserListener typedListener = listener as ICougarParserListener;
			if (typedListener != null) typedListener.EnterPragma_type(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICougarParserListener typedListener = listener as ICougarParserListener;
			if (typedListener != null) typedListener.ExitPragma_type(this);
		}
	}

	[RuleVersion(0)]
	public Pragma_typeContext pragma_type() {
		Pragma_typeContext _localctx = new Pragma_typeContext(Context, State);
		EnterRule(_localctx, 220, RULE_pragma_type);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 964;
			Match(MACRO_NAME);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Quoted_stringContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MACRO_QUOTED_STRING() { return GetToken(CougarParser.MACRO_QUOTED_STRING, 0); }
		public Quoted_stringContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_quoted_string; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICougarParserListener typedListener = listener as ICougarParserListener;
			if (typedListener != null) typedListener.EnterQuoted_string(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICougarParserListener typedListener = listener as ICougarParserListener;
			if (typedListener != null) typedListener.ExitQuoted_string(this);
		}
	}

	[RuleVersion(0)]
	public Quoted_stringContext quoted_string() {
		Quoted_stringContext _localctx = new Quoted_stringContext(Context, State);
		EnterRule(_localctx, 222, RULE_quoted_string);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 966;
			Match(MACRO_QUOTED_STRING);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static int[] _serializedATN = {
		4,1,193,969,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,
		7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,
		2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,7,21,
		2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,7,28,
		2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,7,35,
		2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,2,42,7,42,
		2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,
		2,50,7,50,2,51,7,51,2,52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,
		2,57,7,57,2,58,7,58,2,59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,63,
		2,64,7,64,2,65,7,65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,7,70,
		2,71,7,71,2,72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,2,77,7,77,
		2,78,7,78,2,79,7,79,2,80,7,80,2,81,7,81,2,82,7,82,2,83,7,83,2,84,7,84,
		2,85,7,85,2,86,7,86,2,87,7,87,2,88,7,88,2,89,7,89,2,90,7,90,2,91,7,91,
		2,92,7,92,2,93,7,93,2,94,7,94,2,95,7,95,2,96,7,96,2,97,7,97,2,98,7,98,
		2,99,7,99,2,100,7,100,2,101,7,101,2,102,7,102,2,103,7,103,2,104,7,104,
		2,105,7,105,2,106,7,106,2,107,7,107,2,108,7,108,2,109,7,109,2,110,7,110,
		2,111,7,111,1,0,1,0,1,0,5,0,228,8,0,10,0,12,0,231,9,0,1,1,1,1,1,1,3,1,
		236,8,1,1,1,1,1,5,1,240,8,1,10,1,12,1,243,9,1,1,1,1,1,1,1,1,1,1,1,1,1,
		1,1,1,1,1,1,1,1,5,1,255,8,1,10,1,12,1,258,9,1,1,1,1,1,5,1,262,8,1,10,1,
		12,1,265,9,1,1,1,5,1,268,8,1,10,1,12,1,271,9,1,1,1,1,1,1,1,1,2,1,2,5,2,
		278,8,2,10,2,12,2,281,9,2,1,2,1,2,1,3,1,3,1,3,1,4,1,4,1,4,3,4,291,8,4,
		1,4,1,4,1,4,4,4,296,8,4,11,4,12,4,297,1,4,1,4,1,4,1,5,1,5,1,6,1,6,1,6,
		3,6,308,8,6,1,6,3,6,311,8,6,1,6,3,6,314,8,6,1,7,1,7,1,7,1,8,1,8,1,9,1,
		9,1,10,3,10,324,8,10,1,10,1,10,3,10,328,8,10,5,10,330,8,10,10,10,12,10,
		333,9,10,1,10,1,10,5,10,337,8,10,10,10,12,10,340,9,10,1,11,1,11,1,11,3,
		11,345,8,11,1,11,5,11,348,8,11,10,11,12,11,351,9,11,1,11,1,11,5,11,355,
		8,11,10,11,12,11,358,9,11,1,12,5,12,361,8,12,10,12,12,12,364,9,12,1,13,
		1,13,1,13,1,13,1,13,5,13,371,8,13,10,13,12,13,374,9,13,1,14,1,14,3,14,
		378,8,14,1,14,1,14,1,15,1,15,1,16,1,16,1,17,1,17,1,18,1,18,1,19,1,19,1,
		19,1,19,1,20,1,20,3,20,396,8,20,1,20,1,20,5,20,400,8,20,10,20,12,20,403,
		9,20,1,21,1,21,3,21,407,8,21,1,21,5,21,410,8,21,10,21,12,21,413,9,21,1,
		22,1,22,1,23,1,23,3,23,419,8,23,1,23,1,23,1,24,1,24,3,24,425,8,24,1,24,
		3,24,428,8,24,1,24,5,24,431,8,24,10,24,12,24,434,9,24,1,25,1,25,1,26,1,
		26,1,26,1,26,1,27,1,27,3,27,444,8,27,1,27,1,27,5,27,448,8,27,10,27,12,
		27,451,9,27,1,28,1,28,3,28,455,8,28,1,28,5,28,458,8,28,10,28,12,28,461,
		9,28,1,29,1,29,1,30,1,30,3,30,467,8,30,1,30,1,30,5,30,471,8,30,10,30,12,
		30,474,9,30,1,31,1,31,1,31,5,31,479,8,31,10,31,12,31,482,9,31,1,32,1,32,
		1,33,1,33,3,33,488,8,33,1,33,5,33,491,8,33,10,33,12,33,494,9,33,1,33,1,
		33,5,33,498,8,33,10,33,12,33,501,9,33,1,34,1,34,1,34,1,34,5,34,507,8,34,
		10,34,12,34,510,9,34,1,35,1,35,1,35,1,36,1,36,1,37,1,37,1,38,1,38,1,39,
		1,39,1,39,1,39,4,39,525,8,39,11,39,12,39,526,1,39,1,39,1,40,1,40,1,40,
		1,40,1,40,1,40,1,40,1,40,1,40,1,40,1,40,5,40,542,8,40,10,40,12,40,545,
		9,40,1,40,1,40,5,40,549,8,40,10,40,12,40,552,9,40,1,41,1,41,1,41,3,41,
		557,8,41,1,42,1,42,1,42,3,42,562,8,42,1,43,1,43,1,43,3,43,567,8,43,1,44,
		1,44,1,44,3,44,572,8,44,1,45,1,45,1,45,3,45,577,8,45,1,46,1,46,1,46,3,
		46,582,8,46,1,47,1,47,1,47,3,47,587,8,47,1,48,1,48,1,48,3,48,592,8,48,
		1,49,1,49,1,49,3,49,597,8,49,1,50,1,50,1,50,3,50,602,8,50,1,51,1,51,1,
		51,5,51,607,8,51,10,51,12,51,610,9,51,1,52,1,52,1,53,1,53,1,53,3,53,617,
		8,53,1,53,5,53,620,8,53,10,53,12,53,623,9,53,1,53,1,53,5,53,627,8,53,10,
		53,12,53,630,9,53,1,54,4,54,633,8,54,11,54,12,54,634,1,55,1,55,1,55,1,
		55,1,55,1,55,1,55,1,55,5,55,645,8,55,10,55,12,55,648,9,55,1,56,1,56,1,
		56,1,57,1,57,1,58,1,58,1,59,1,59,1,60,1,60,1,61,1,61,1,62,1,62,1,62,1,
		62,1,63,1,63,1,64,1,64,1,64,1,64,1,65,1,65,1,65,3,65,676,8,65,1,66,1,66,
		1,66,3,66,681,8,66,1,66,1,66,5,66,685,8,66,10,66,12,66,688,9,66,1,66,3,
		66,691,8,66,1,67,1,67,1,67,1,67,1,68,1,68,1,68,1,68,1,68,4,68,702,8,68,
		11,68,12,68,703,1,68,3,68,707,8,68,1,69,1,69,1,69,1,69,1,69,4,69,714,8,
		69,11,69,12,69,715,1,69,1,69,1,70,1,70,3,70,722,8,70,1,71,1,71,1,72,1,
		72,1,72,1,72,5,72,730,8,72,10,72,12,72,733,9,72,1,72,3,72,736,8,72,1,72,
		3,72,739,8,72,1,73,1,73,1,74,1,74,1,75,1,75,3,75,747,8,75,1,76,1,76,1,
		76,1,76,1,76,1,76,1,77,1,77,1,77,1,78,1,78,1,78,1,78,1,78,1,78,1,78,1,
		78,1,79,1,79,1,79,3,79,769,8,79,1,80,1,80,1,80,1,80,1,80,1,80,1,80,1,80,
		1,80,1,80,1,80,1,80,1,80,1,80,1,80,3,80,786,8,80,1,81,1,81,1,82,1,82,1,
		82,3,82,793,8,82,1,83,1,83,3,83,797,8,83,1,83,1,83,1,83,1,84,4,84,803,
		8,84,11,84,12,84,804,1,85,1,85,1,86,1,86,1,87,1,87,3,87,813,8,87,1,87,
		1,87,1,88,1,88,4,88,819,8,88,11,88,12,88,820,1,88,3,88,824,8,88,1,89,1,
		89,1,90,1,90,4,90,830,8,90,11,90,12,90,831,1,90,1,90,1,91,4,91,837,8,91,
		11,91,12,91,838,1,92,1,92,1,92,1,92,1,92,1,92,3,92,847,8,92,1,92,1,92,
		1,93,1,93,1,93,1,93,3,93,855,8,93,1,94,1,94,1,95,3,95,860,8,95,1,95,1,
		95,1,95,1,95,1,95,3,95,867,8,95,1,95,3,95,870,8,95,1,96,1,96,1,97,1,97,
		1,97,1,97,3,97,878,8,97,4,97,880,8,97,11,97,12,97,881,1,98,1,98,1,98,1,
		98,5,98,888,8,98,10,98,12,98,891,9,98,1,99,1,99,1,100,1,100,1,101,1,101,
		1,101,1,101,1,101,1,101,1,101,3,101,904,8,101,1,102,1,102,1,102,1,103,
		1,103,1,103,1,103,1,104,1,104,1,104,1,104,1,104,5,104,918,8,104,10,104,
		12,104,921,9,104,1,105,3,105,924,8,105,1,105,1,105,1,105,1,105,1,105,1,
		105,1,105,1,105,1,105,1,105,1,105,3,105,937,8,105,1,106,1,106,1,107,1,
		107,1,107,1,108,1,108,1,108,1,108,1,108,1,108,3,108,950,8,108,1,108,3,
		108,953,8,108,1,108,3,108,956,8,108,1,108,3,108,959,8,108,3,108,961,8,
		108,1,109,1,109,1,110,1,110,1,111,1,111,1,111,1,338,0,112,0,2,4,6,8,10,
		12,14,16,18,20,22,24,26,28,30,32,34,36,38,40,42,44,46,48,50,52,54,56,58,
		60,62,64,66,68,70,72,74,76,78,80,82,84,86,88,90,92,94,96,98,100,102,104,
		106,108,110,112,114,116,118,120,122,124,126,128,130,132,134,136,138,140,
		142,144,146,148,150,152,154,156,158,160,162,164,166,168,170,172,174,176,
		178,180,182,184,186,188,190,192,194,196,198,200,202,204,206,208,210,212,
		214,216,218,220,222,0,8,1,0,48,49,2,0,110,110,113,114,2,0,62,67,69,69,
		2,0,148,151,154,155,1,1,163,163,1,0,170,171,1,0,177,178,1,0,174,176,1026,
		0,229,1,0,0,0,2,232,1,0,0,0,4,275,1,0,0,0,6,284,1,0,0,0,8,287,1,0,0,0,
		10,302,1,0,0,0,12,304,1,0,0,0,14,315,1,0,0,0,16,318,1,0,0,0,18,320,1,0,
		0,0,20,323,1,0,0,0,22,341,1,0,0,0,24,362,1,0,0,0,26,372,1,0,0,0,28,375,
		1,0,0,0,30,381,1,0,0,0,32,383,1,0,0,0,34,385,1,0,0,0,36,387,1,0,0,0,38,
		389,1,0,0,0,40,393,1,0,0,0,42,404,1,0,0,0,44,414,1,0,0,0,46,416,1,0,0,
		0,48,422,1,0,0,0,50,435,1,0,0,0,52,437,1,0,0,0,54,441,1,0,0,0,56,452,1,
		0,0,0,58,462,1,0,0,0,60,464,1,0,0,0,62,475,1,0,0,0,64,483,1,0,0,0,66,485,
		1,0,0,0,68,508,1,0,0,0,70,511,1,0,0,0,72,514,1,0,0,0,74,516,1,0,0,0,76,
		518,1,0,0,0,78,520,1,0,0,0,80,530,1,0,0,0,82,553,1,0,0,0,84,558,1,0,0,
		0,86,563,1,0,0,0,88,568,1,0,0,0,90,573,1,0,0,0,92,578,1,0,0,0,94,583,1,
		0,0,0,96,588,1,0,0,0,98,593,1,0,0,0,100,598,1,0,0,0,102,603,1,0,0,0,104,
		611,1,0,0,0,106,613,1,0,0,0,108,632,1,0,0,0,110,646,1,0,0,0,112,649,1,
		0,0,0,114,652,1,0,0,0,116,654,1,0,0,0,118,656,1,0,0,0,120,658,1,0,0,0,
		122,660,1,0,0,0,124,662,1,0,0,0,126,666,1,0,0,0,128,668,1,0,0,0,130,672,
		1,0,0,0,132,677,1,0,0,0,134,692,1,0,0,0,136,701,1,0,0,0,138,708,1,0,0,
		0,140,719,1,0,0,0,142,723,1,0,0,0,144,725,1,0,0,0,146,740,1,0,0,0,148,
		742,1,0,0,0,150,746,1,0,0,0,152,748,1,0,0,0,154,754,1,0,0,0,156,757,1,
		0,0,0,158,768,1,0,0,0,160,785,1,0,0,0,162,787,1,0,0,0,164,792,1,0,0,0,
		166,796,1,0,0,0,168,802,1,0,0,0,170,806,1,0,0,0,172,808,1,0,0,0,174,810,
		1,0,0,0,176,818,1,0,0,0,178,825,1,0,0,0,180,827,1,0,0,0,182,836,1,0,0,
		0,184,846,1,0,0,0,186,850,1,0,0,0,188,856,1,0,0,0,190,859,1,0,0,0,192,
		871,1,0,0,0,194,879,1,0,0,0,196,883,1,0,0,0,198,892,1,0,0,0,200,894,1,
		0,0,0,202,896,1,0,0,0,204,905,1,0,0,0,206,908,1,0,0,0,208,912,1,0,0,0,
		210,936,1,0,0,0,212,938,1,0,0,0,214,940,1,0,0,0,216,943,1,0,0,0,218,962,
		1,0,0,0,220,964,1,0,0,0,222,966,1,0,0,0,224,228,3,182,91,0,225,228,3,2,
		1,0,226,228,3,8,4,0,227,224,1,0,0,0,227,225,1,0,0,0,227,226,1,0,0,0,228,
		231,1,0,0,0,229,227,1,0,0,0,229,230,1,0,0,0,230,1,1,0,0,0,231,229,1,0,
		0,0,232,233,5,6,0,0,233,235,3,162,81,0,234,236,3,4,2,0,235,234,1,0,0,0,
		235,236,1,0,0,0,236,237,1,0,0,0,237,241,5,43,0,0,238,240,3,6,3,0,239,238,
		1,0,0,0,240,243,1,0,0,0,241,239,1,0,0,0,241,242,1,0,0,0,242,256,1,0,0,
		0,243,241,1,0,0,0,244,255,3,130,65,0,245,255,3,22,11,0,246,255,3,40,20,
		0,247,255,3,46,23,0,248,255,3,54,27,0,249,255,3,60,30,0,250,255,3,66,33,
		0,251,255,3,80,40,0,252,255,3,6,3,0,253,255,3,174,87,0,254,244,1,0,0,0,
		254,245,1,0,0,0,254,246,1,0,0,0,254,247,1,0,0,0,254,248,1,0,0,0,254,249,
		1,0,0,0,254,250,1,0,0,0,254,251,1,0,0,0,254,252,1,0,0,0,254,253,1,0,0,
		0,255,258,1,0,0,0,256,254,1,0,0,0,256,257,1,0,0,0,257,263,1,0,0,0,258,
		256,1,0,0,0,259,262,3,132,66,0,260,262,3,174,87,0,261,259,1,0,0,0,261,
		260,1,0,0,0,262,265,1,0,0,0,263,261,1,0,0,0,263,264,1,0,0,0,264,269,1,
		0,0,0,265,263,1,0,0,0,266,268,3,6,3,0,267,266,1,0,0,0,268,271,1,0,0,0,
		269,267,1,0,0,0,269,270,1,0,0,0,270,272,1,0,0,0,271,269,1,0,0,0,272,273,
		5,44,0,0,273,274,5,8,0,0,274,3,1,0,0,0,275,279,5,47,0,0,276,278,5,148,
		0,0,277,276,1,0,0,0,278,281,1,0,0,0,279,277,1,0,0,0,279,280,1,0,0,0,280,
		282,1,0,0,0,281,279,1,0,0,0,282,283,5,156,0,0,283,5,1,0,0,0,284,285,5,
		47,0,0,285,286,5,156,0,0,286,7,1,0,0,0,287,288,5,7,0,0,288,290,3,10,5,
		0,289,291,3,14,7,0,290,289,1,0,0,0,290,291,1,0,0,0,291,292,1,0,0,0,292,
		295,5,55,0,0,293,296,3,14,7,0,294,296,3,12,6,0,295,293,1,0,0,0,295,294,
		1,0,0,0,296,297,1,0,0,0,297,295,1,0,0,0,297,298,1,0,0,0,298,299,1,0,0,
		0,299,300,5,56,0,0,300,301,5,8,0,0,301,9,1,0,0,0,302,303,5,52,0,0,303,
		11,1,0,0,0,304,307,3,16,8,0,305,306,5,53,0,0,306,308,3,18,9,0,307,305,
		1,0,0,0,307,308,1,0,0,0,308,310,1,0,0,0,309,311,5,54,0,0,310,309,1,0,0,
		0,310,311,1,0,0,0,311,313,1,0,0,0,312,314,3,14,7,0,313,312,1,0,0,0,313,
		314,1,0,0,0,314,13,1,0,0,0,315,316,5,58,0,0,316,317,5,158,0,0,317,15,1,
		0,0,0,318,319,5,52,0,0,319,17,1,0,0,0,320,321,7,0,0,0,321,19,1,0,0,0,322,
		324,3,136,68,0,323,322,1,0,0,0,323,324,1,0,0,0,324,331,1,0,0,0,325,327,
		5,70,0,0,326,328,3,136,68,0,327,326,1,0,0,0,327,328,1,0,0,0,328,330,1,
		0,0,0,329,325,1,0,0,0,330,333,1,0,0,0,331,329,1,0,0,0,331,332,1,0,0,0,
		332,334,1,0,0,0,333,331,1,0,0,0,334,338,5,76,0,0,335,337,3,174,87,0,336,
		335,1,0,0,0,337,340,1,0,0,0,338,339,1,0,0,0,338,336,1,0,0,0,339,21,1,0,
		0,0,340,338,1,0,0,0,341,342,5,12,0,0,342,344,3,24,12,0,343,345,5,109,0,
		0,344,343,1,0,0,0,344,345,1,0,0,0,345,349,1,0,0,0,346,348,3,28,14,0,347,
		346,1,0,0,0,348,351,1,0,0,0,349,347,1,0,0,0,349,350,1,0,0,0,350,352,1,
		0,0,0,351,349,1,0,0,0,352,356,5,119,0,0,353,355,3,174,87,0,354,353,1,0,
		0,0,355,358,1,0,0,0,356,354,1,0,0,0,356,357,1,0,0,0,357,23,1,0,0,0,358,
		356,1,0,0,0,359,361,3,30,15,0,360,359,1,0,0,0,361,364,1,0,0,0,362,360,
		1,0,0,0,362,363,1,0,0,0,363,25,1,0,0,0,364,362,1,0,0,0,365,371,3,30,15,
		0,366,371,3,32,16,0,367,371,3,34,17,0,368,371,3,36,18,0,369,371,3,38,19,
		0,370,365,1,0,0,0,370,366,1,0,0,0,370,367,1,0,0,0,370,368,1,0,0,0,370,
		369,1,0,0,0,371,374,1,0,0,0,372,370,1,0,0,0,372,373,1,0,0,0,373,27,1,0,
		0,0,374,372,1,0,0,0,375,377,5,108,0,0,376,378,5,110,0,0,377,376,1,0,0,
		0,377,378,1,0,0,0,378,379,1,0,0,0,379,380,3,26,13,0,380,29,1,0,0,0,381,
		382,7,1,0,0,382,31,1,0,0,0,383,384,5,111,0,0,384,33,1,0,0,0,385,386,5,
		112,0,0,386,35,1,0,0,0,387,388,5,115,0,0,388,37,1,0,0,0,389,390,5,116,
		0,0,390,391,3,26,13,0,391,392,5,117,0,0,392,39,1,0,0,0,393,395,5,9,0,0,
		394,396,3,42,21,0,395,394,1,0,0,0,395,396,1,0,0,0,396,397,1,0,0,0,397,
		401,5,107,0,0,398,400,3,174,87,0,399,398,1,0,0,0,400,403,1,0,0,0,401,399,
		1,0,0,0,401,402,1,0,0,0,402,41,1,0,0,0,403,401,1,0,0,0,404,411,3,44,22,
		0,405,407,5,105,0,0,406,405,1,0,0,0,406,407,1,0,0,0,407,408,1,0,0,0,408,
		410,3,44,22,0,409,406,1,0,0,0,410,413,1,0,0,0,411,409,1,0,0,0,411,412,
		1,0,0,0,412,43,1,0,0,0,413,411,1,0,0,0,414,415,5,104,0,0,415,45,1,0,0,
		0,416,418,5,13,0,0,417,419,3,48,24,0,418,417,1,0,0,0,418,419,1,0,0,0,419,
		420,1,0,0,0,420,421,5,125,0,0,421,47,1,0,0,0,422,424,3,50,25,0,423,425,
		3,52,26,0,424,423,1,0,0,0,424,425,1,0,0,0,425,432,1,0,0,0,426,428,5,121,
		0,0,427,426,1,0,0,0,427,428,1,0,0,0,428,429,1,0,0,0,429,431,3,50,25,0,
		430,427,1,0,0,0,431,434,1,0,0,0,432,430,1,0,0,0,432,433,1,0,0,0,433,49,
		1,0,0,0,434,432,1,0,0,0,435,436,5,120,0,0,436,51,1,0,0,0,437,438,5,122,
		0,0,438,439,3,50,25,0,439,440,5,123,0,0,440,53,1,0,0,0,441,443,5,14,0,
		0,442,444,3,56,28,0,443,442,1,0,0,0,443,444,1,0,0,0,444,445,1,0,0,0,445,
		449,5,129,0,0,446,448,3,174,87,0,447,446,1,0,0,0,448,451,1,0,0,0,449,447,
		1,0,0,0,449,450,1,0,0,0,450,55,1,0,0,0,451,449,1,0,0,0,452,459,3,58,29,
		0,453,455,5,127,0,0,454,453,1,0,0,0,454,455,1,0,0,0,455,456,1,0,0,0,456,
		458,3,58,29,0,457,454,1,0,0,0,458,461,1,0,0,0,459,457,1,0,0,0,459,460,
		1,0,0,0,460,57,1,0,0,0,461,459,1,0,0,0,462,463,5,126,0,0,463,59,1,0,0,
		0,464,466,5,15,0,0,465,467,3,62,31,0,466,465,1,0,0,0,466,467,1,0,0,0,467,
		468,1,0,0,0,468,472,5,133,0,0,469,471,3,174,87,0,470,469,1,0,0,0,471,474,
		1,0,0,0,472,470,1,0,0,0,472,473,1,0,0,0,473,61,1,0,0,0,474,472,1,0,0,0,
		475,480,3,64,32,0,476,477,5,131,0,0,477,479,3,64,32,0,478,476,1,0,0,0,
		479,482,1,0,0,0,480,478,1,0,0,0,480,481,1,0,0,0,481,63,1,0,0,0,482,480,
		1,0,0,0,483,484,5,130,0,0,484,65,1,0,0,0,485,487,5,16,0,0,486,488,3,68,
		34,0,487,486,1,0,0,0,487,488,1,0,0,0,488,492,1,0,0,0,489,491,3,70,35,0,
		490,489,1,0,0,0,491,494,1,0,0,0,492,490,1,0,0,0,492,493,1,0,0,0,493,495,
		1,0,0,0,494,492,1,0,0,0,495,499,5,141,0,0,496,498,3,174,87,0,497,496,1,
		0,0,0,498,501,1,0,0,0,499,497,1,0,0,0,499,500,1,0,0,0,500,67,1,0,0,0,501,
		499,1,0,0,0,502,507,3,72,36,0,503,507,3,74,37,0,504,507,3,76,38,0,505,
		507,3,78,39,0,506,502,1,0,0,0,506,503,1,0,0,0,506,504,1,0,0,0,506,505,
		1,0,0,0,507,510,1,0,0,0,508,506,1,0,0,0,508,509,1,0,0,0,509,69,1,0,0,0,
		510,508,1,0,0,0,511,512,5,134,0,0,512,513,3,68,34,0,513,71,1,0,0,0,514,
		515,5,137,0,0,515,73,1,0,0,0,516,517,5,135,0,0,517,75,1,0,0,0,518,519,
		5,136,0,0,519,77,1,0,0,0,520,524,5,138,0,0,521,525,3,72,36,0,522,525,3,
		74,37,0,523,525,3,76,38,0,524,521,1,0,0,0,524,522,1,0,0,0,524,523,1,0,
		0,0,525,526,1,0,0,0,526,524,1,0,0,0,526,527,1,0,0,0,527,528,1,0,0,0,528,
		529,5,139,0,0,529,79,1,0,0,0,530,543,5,10,0,0,531,542,3,84,42,0,532,542,
		3,82,41,0,533,542,3,88,44,0,534,542,3,90,45,0,535,542,3,86,43,0,536,542,
		3,92,46,0,537,542,3,94,47,0,538,542,3,96,48,0,539,542,3,98,49,0,540,542,
		3,100,50,0,541,531,1,0,0,0,541,532,1,0,0,0,541,533,1,0,0,0,541,534,1,0,
		0,0,541,535,1,0,0,0,541,536,1,0,0,0,541,537,1,0,0,0,541,538,1,0,0,0,541,
		539,1,0,0,0,541,540,1,0,0,0,542,545,1,0,0,0,543,541,1,0,0,0,543,544,1,
		0,0,0,544,546,1,0,0,0,545,543,1,0,0,0,546,550,5,91,0,0,547,549,3,174,87,
		0,548,547,1,0,0,0,549,552,1,0,0,0,550,548,1,0,0,0,550,551,1,0,0,0,551,
		81,1,0,0,0,552,550,1,0,0,0,553,556,5,82,0,0,554,555,5,87,0,0,555,557,3,
		102,51,0,556,554,1,0,0,0,556,557,1,0,0,0,557,83,1,0,0,0,558,561,5,79,0,
		0,559,560,5,87,0,0,560,562,3,102,51,0,561,559,1,0,0,0,561,562,1,0,0,0,
		562,85,1,0,0,0,563,566,5,85,0,0,564,565,5,87,0,0,565,567,3,102,51,0,566,
		564,1,0,0,0,566,567,1,0,0,0,567,87,1,0,0,0,568,571,5,84,0,0,569,570,5,
		87,0,0,570,572,3,102,51,0,571,569,1,0,0,0,571,572,1,0,0,0,572,89,1,0,0,
		0,573,576,5,78,0,0,574,575,5,87,0,0,575,577,3,102,51,0,576,574,1,0,0,0,
		576,577,1,0,0,0,577,91,1,0,0,0,578,581,5,77,0,0,579,580,5,87,0,0,580,582,
		3,102,51,0,581,579,1,0,0,0,581,582,1,0,0,0,582,93,1,0,0,0,583,586,5,80,
		0,0,584,585,5,87,0,0,585,587,3,102,51,0,586,584,1,0,0,0,586,587,1,0,0,
		0,587,95,1,0,0,0,588,591,5,81,0,0,589,590,5,87,0,0,590,592,3,102,51,0,
		591,589,1,0,0,0,591,592,1,0,0,0,592,97,1,0,0,0,593,596,5,83,0,0,594,595,
		5,87,0,0,595,597,3,102,51,0,596,594,1,0,0,0,596,597,1,0,0,0,597,99,1,0,
		0,0,598,601,5,86,0,0,599,600,5,87,0,0,600,602,3,102,51,0,601,599,1,0,0,
		0,601,602,1,0,0,0,602,101,1,0,0,0,603,608,3,104,52,0,604,605,5,88,0,0,
		605,607,3,104,52,0,606,604,1,0,0,0,607,610,1,0,0,0,608,606,1,0,0,0,608,
		609,1,0,0,0,609,103,1,0,0,0,610,608,1,0,0,0,611,612,5,89,0,0,612,105,1,
		0,0,0,613,616,5,11,0,0,614,617,3,108,54,0,615,617,3,110,55,0,616,614,1,
		0,0,0,616,615,1,0,0,0,617,621,1,0,0,0,618,620,3,112,56,0,619,618,1,0,0,
		0,620,623,1,0,0,0,621,619,1,0,0,0,621,622,1,0,0,0,622,624,1,0,0,0,623,
		621,1,0,0,0,624,628,5,103,0,0,625,627,3,174,87,0,626,625,1,0,0,0,627,630,
		1,0,0,0,628,626,1,0,0,0,628,629,1,0,0,0,629,107,1,0,0,0,630,628,1,0,0,
		0,631,633,5,95,0,0,632,631,1,0,0,0,633,634,1,0,0,0,634,632,1,0,0,0,634,
		635,1,0,0,0,635,109,1,0,0,0,636,645,3,114,57,0,637,645,3,116,58,0,638,
		645,3,118,59,0,639,645,3,124,62,0,640,645,3,120,60,0,641,645,3,122,61,
		0,642,645,3,126,63,0,643,645,3,128,64,0,644,636,1,0,0,0,644,637,1,0,0,
		0,644,638,1,0,0,0,644,639,1,0,0,0,644,640,1,0,0,0,644,641,1,0,0,0,644,
		642,1,0,0,0,644,643,1,0,0,0,645,648,1,0,0,0,646,644,1,0,0,0,646,647,1,
		0,0,0,647,111,1,0,0,0,648,646,1,0,0,0,649,650,5,92,0,0,650,651,3,110,55,
		0,651,113,1,0,0,0,652,653,5,95,0,0,653,115,1,0,0,0,654,655,5,93,0,0,655,
		117,1,0,0,0,656,657,5,94,0,0,657,119,1,0,0,0,658,659,5,96,0,0,659,121,
		1,0,0,0,660,661,5,97,0,0,661,123,1,0,0,0,662,663,5,100,0,0,663,664,3,110,
		55,0,664,665,5,101,0,0,665,125,1,0,0,0,666,667,5,98,0,0,667,127,1,0,0,
		0,668,669,5,99,0,0,669,670,3,110,55,0,670,671,5,99,0,0,671,129,1,0,0,0,
		672,673,5,20,0,0,673,675,3,148,74,0,674,676,3,20,10,0,675,674,1,0,0,0,
		675,676,1,0,0,0,676,131,1,0,0,0,677,678,3,160,80,0,678,680,3,150,75,0,
		679,681,3,134,67,0,680,679,1,0,0,0,680,681,1,0,0,0,681,682,1,0,0,0,682,
		690,5,45,0,0,683,685,3,174,87,0,684,683,1,0,0,0,685,688,1,0,0,0,686,684,
		1,0,0,0,686,687,1,0,0,0,687,691,1,0,0,0,688,686,1,0,0,0,689,691,3,106,
		53,0,690,686,1,0,0,0,690,689,1,0,0,0,690,691,1,0,0,0,691,133,1,0,0,0,692,
		693,5,23,0,0,693,694,3,164,82,0,694,695,5,146,0,0,695,135,1,0,0,0,696,
		702,3,146,73,0,697,702,3,142,71,0,698,702,3,140,70,0,699,702,3,144,72,
		0,700,702,3,138,69,0,701,696,1,0,0,0,701,697,1,0,0,0,701,698,1,0,0,0,701,
		699,1,0,0,0,701,700,1,0,0,0,702,703,1,0,0,0,703,701,1,0,0,0,703,704,1,
		0,0,0,704,706,1,0,0,0,705,707,5,73,0,0,706,705,1,0,0,0,706,707,1,0,0,0,
		707,137,1,0,0,0,708,713,5,71,0,0,709,714,3,146,73,0,710,714,3,142,71,0,
		711,714,3,140,70,0,712,714,3,144,72,0,713,709,1,0,0,0,713,710,1,0,0,0,
		713,711,1,0,0,0,713,712,1,0,0,0,714,715,1,0,0,0,715,713,1,0,0,0,715,716,
		1,0,0,0,716,717,1,0,0,0,717,718,5,72,0,0,718,139,1,0,0,0,719,721,5,60,
		0,0,720,722,3,142,71,0,721,720,1,0,0,0,721,722,1,0,0,0,722,141,1,0,0,0,
		723,724,5,61,0,0,724,143,1,0,0,0,725,731,5,59,0,0,726,730,3,146,73,0,727,
		730,3,142,71,0,728,730,3,140,70,0,729,726,1,0,0,0,729,727,1,0,0,0,729,
		728,1,0,0,0,730,733,1,0,0,0,731,729,1,0,0,0,731,732,1,0,0,0,732,735,1,
		0,0,0,733,731,1,0,0,0,734,736,5,73,0,0,735,734,1,0,0,0,735,736,1,0,0,0,
		736,738,1,0,0,0,737,739,5,68,0,0,738,737,1,0,0,0,738,739,1,0,0,0,739,145,
		1,0,0,0,740,741,7,2,0,0,741,147,1,0,0,0,742,743,5,67,0,0,743,149,1,0,0,
		0,744,747,3,162,81,0,745,747,5,42,0,0,746,744,1,0,0,0,746,745,1,0,0,0,
		747,151,1,0,0,0,748,749,5,37,0,0,749,750,5,38,0,0,750,751,5,17,0,0,751,
		752,3,160,80,0,752,753,5,18,0,0,753,153,1,0,0,0,754,755,5,37,0,0,755,756,
		5,39,0,0,756,155,1,0,0,0,757,758,5,37,0,0,758,759,5,40,0,0,759,760,5,17,
		0,0,760,761,3,160,80,0,761,762,5,19,0,0,762,763,3,160,80,0,763,764,5,18,
		0,0,764,157,1,0,0,0,765,769,3,152,76,0,766,769,3,154,77,0,767,769,3,156,
		78,0,768,765,1,0,0,0,768,766,1,0,0,0,768,767,1,0,0,0,769,159,1,0,0,0,770,
		786,5,24,0,0,771,786,5,25,0,0,772,786,5,26,0,0,773,786,5,27,0,0,774,786,
		5,28,0,0,775,786,5,29,0,0,776,786,5,30,0,0,777,786,5,31,0,0,778,786,5,
		32,0,0,779,786,5,33,0,0,780,786,5,34,0,0,781,786,5,35,0,0,782,786,5,36,
		0,0,783,786,3,158,79,0,784,786,3,162,81,0,785,770,1,0,0,0,785,771,1,0,
		0,0,785,772,1,0,0,0,785,773,1,0,0,0,785,774,1,0,0,0,785,775,1,0,0,0,785,
		776,1,0,0,0,785,777,1,0,0,0,785,778,1,0,0,0,785,779,1,0,0,0,785,780,1,
		0,0,0,785,781,1,0,0,0,785,782,1,0,0,0,785,783,1,0,0,0,785,784,1,0,0,0,
		786,161,1,0,0,0,787,788,5,41,0,0,788,163,1,0,0,0,789,793,3,168,84,0,790,
		793,3,172,86,0,791,793,3,166,83,0,792,789,1,0,0,0,792,790,1,0,0,0,792,
		791,1,0,0,0,793,165,1,0,0,0,794,797,3,168,84,0,795,797,3,172,86,0,796,
		794,1,0,0,0,796,795,1,0,0,0,797,798,1,0,0,0,798,799,3,170,85,0,799,800,
		3,172,86,0,800,167,1,0,0,0,801,803,5,145,0,0,802,801,1,0,0,0,803,804,1,
		0,0,0,804,802,1,0,0,0,804,805,1,0,0,0,805,169,1,0,0,0,806,807,5,144,0,
		0,807,171,1,0,0,0,808,809,5,143,0,0,809,173,1,0,0,0,810,812,5,47,0,0,811,
		813,3,176,88,0,812,811,1,0,0,0,812,813,1,0,0,0,813,814,1,0,0,0,814,815,
		5,156,0,0,815,175,1,0,0,0,816,819,3,178,89,0,817,819,3,180,90,0,818,816,
		1,0,0,0,818,817,1,0,0,0,819,820,1,0,0,0,820,818,1,0,0,0,820,821,1,0,0,
		0,821,823,1,0,0,0,822,824,5,151,0,0,823,822,1,0,0,0,823,824,1,0,0,0,824,
		177,1,0,0,0,825,826,7,3,0,0,826,179,1,0,0,0,827,829,5,152,0,0,828,830,
		3,176,88,0,829,828,1,0,0,0,830,831,1,0,0,0,831,829,1,0,0,0,831,832,1,0,
		0,0,832,833,1,0,0,0,833,834,5,153,0,0,834,181,1,0,0,0,835,837,3,184,92,
		0,836,835,1,0,0,0,837,838,1,0,0,0,838,836,1,0,0,0,838,839,1,0,0,0,839,
		183,1,0,0,0,840,847,3,186,93,0,841,847,3,202,101,0,842,847,3,216,108,0,
		843,847,3,206,103,0,844,847,3,208,104,0,845,847,3,214,107,0,846,840,1,
		0,0,0,846,841,1,0,0,0,846,842,1,0,0,0,846,843,1,0,0,0,846,844,1,0,0,0,
		846,845,1,0,0,0,847,848,1,0,0,0,848,849,7,4,0,0,849,185,1,0,0,0,850,851,
		5,5,0,0,851,852,5,182,0,0,852,854,3,188,94,0,853,855,3,190,95,0,854,853,
		1,0,0,0,854,855,1,0,0,0,855,187,1,0,0,0,856,857,5,191,0,0,857,189,1,0,
		0,0,858,860,5,164,0,0,859,858,1,0,0,0,859,860,1,0,0,0,860,866,1,0,0,0,
		861,867,3,196,98,0,862,867,3,200,100,0,863,867,3,222,111,0,864,867,3,194,
		97,0,865,867,3,192,96,0,866,861,1,0,0,0,866,862,1,0,0,0,866,863,1,0,0,
		0,866,864,1,0,0,0,866,865,1,0,0,0,867,869,1,0,0,0,868,870,5,165,0,0,869,
		868,1,0,0,0,869,870,1,0,0,0,870,191,1,0,0,0,871,872,5,191,0,0,872,193,
		1,0,0,0,873,874,3,192,96,0,874,877,3,198,99,0,875,878,3,192,96,0,876,878,
		3,196,98,0,877,875,1,0,0,0,877,876,1,0,0,0,878,880,1,0,0,0,879,873,1,0,
		0,0,880,881,1,0,0,0,881,879,1,0,0,0,881,882,1,0,0,0,882,195,1,0,0,0,883,
		889,5,172,0,0,884,885,3,198,99,0,885,886,5,172,0,0,886,888,1,0,0,0,887,
		884,1,0,0,0,888,891,1,0,0,0,889,887,1,0,0,0,889,890,1,0,0,0,890,197,1,
		0,0,0,891,889,1,0,0,0,892,893,7,5,0,0,893,199,1,0,0,0,894,895,5,173,0,
		0,895,201,1,0,0,0,896,897,5,5,0,0,897,903,5,180,0,0,898,904,3,222,111,
		0,899,900,5,166,0,0,900,901,3,204,102,0,901,902,5,167,0,0,902,904,1,0,
		0,0,903,898,1,0,0,0,903,899,1,0,0,0,904,203,1,0,0,0,905,906,5,191,0,0,
		906,907,5,193,0,0,907,205,1,0,0,0,908,909,5,5,0,0,909,910,5,184,0,0,910,
		911,5,191,0,0,911,207,1,0,0,0,912,913,5,5,0,0,913,914,5,183,0,0,914,919,
		3,210,105,0,915,916,7,6,0,0,916,918,3,210,105,0,917,915,1,0,0,0,918,921,
		1,0,0,0,919,917,1,0,0,0,919,920,1,0,0,0,920,209,1,0,0,0,921,919,1,0,0,
		0,922,924,5,179,0,0,923,922,1,0,0,0,923,924,1,0,0,0,924,925,1,0,0,0,925,
		926,5,181,0,0,926,927,5,164,0,0,927,928,3,188,94,0,928,929,5,165,0,0,929,
		937,1,0,0,0,930,931,5,164,0,0,931,932,3,188,94,0,932,933,3,212,106,0,933,
		934,3,196,98,0,934,935,5,165,0,0,935,937,1,0,0,0,936,923,1,0,0,0,936,930,
		1,0,0,0,937,211,1,0,0,0,938,939,7,7,0,0,939,213,1,0,0,0,940,941,5,5,0,
		0,941,942,5,185,0,0,942,215,1,0,0,0,943,944,5,5,0,0,944,960,5,187,0,0,
		945,961,5,188,0,0,946,958,3,218,109,0,947,949,5,164,0,0,948,950,3,220,
		110,0,949,948,1,0,0,0,949,950,1,0,0,0,950,952,1,0,0,0,951,953,5,169,0,
		0,952,951,1,0,0,0,952,953,1,0,0,0,953,955,1,0,0,0,954,956,3,196,98,0,955,
		954,1,0,0,0,955,956,1,0,0,0,956,957,1,0,0,0,957,959,5,165,0,0,958,947,
		1,0,0,0,958,959,1,0,0,0,959,961,1,0,0,0,960,945,1,0,0,0,960,946,1,0,0,
		0,961,217,1,0,0,0,962,963,5,191,0,0,963,219,1,0,0,0,964,965,5,191,0,0,
		965,221,1,0,0,0,966,967,5,192,0,0,967,223,1,0,0,0,112,227,229,235,241,
		254,256,261,263,269,279,290,295,297,307,310,313,323,327,331,338,344,349,
		356,362,370,372,377,395,401,406,411,418,424,427,432,443,449,454,459,466,
		472,480,487,492,499,506,508,524,526,541,543,550,556,561,566,571,576,581,
		586,591,596,601,608,616,621,628,634,644,646,675,680,686,690,701,703,706,
		713,715,721,729,731,735,738,746,768,785,792,796,804,812,818,820,823,831,
		838,846,854,859,866,869,877,881,889,903,919,923,936,949,952,955,958,960
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
