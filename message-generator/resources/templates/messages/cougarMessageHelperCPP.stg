import "common.stg"
import "cougarMessageHelperJSON_CPP.stg"
import "cougarMessageHelperBSON_CPP.stg"
import "cougarNonMessageHelperImplCPP.stg"
import "cougarMessageBuildersCPP.stg"

defineHelperClass(message) ::= <<
// Class implementation: <message.name>_Msg

const char* <message.name>_Msg::<message.name>_NAME = "<message.name>";
const char* <message.name>_Msg::<message.name>_ID = <if(message.hasDefine)>"<message.define.name>"<else><message.name>_NAME<endif>;

<if(message.hasVariableLengthArrayMember)>
size_t <message.name>_Msg::messageSize(size_t nVariableArrayLength) const
{
    return sizeof(<message.name>) + (nVariableArrayLength > 0 ? (nVariableArrayLength - 1) : 0) * sizeof(<message.variableLengthArrayMember.singleValueCppType>);
}
<endif>
void <message.name>_Msg::initialiseMessageBuffer(MsgBuffer_t& msgBuffer, size_t nVariableArrayLength) const
{
    msgBuffer.resize(messageSize(nVariableArrayLength));
    std::memset(msgBuffer.data(), 0, messageSize(nVariableArrayLength));
}
<if(message.hasSiteIdMember)>
int32_t <message.name>_Msg::siteId(const void* pvMsgBase) const
{
    return reinterpret_cast\<const <message.name>*>(pvMsgBase)-><buildSiteIdPath(message)>;
}

int32_t <message.name>_Msg::siteId(const CPOMsgEx& msgBase) const
{
    return siteId(msgBase.GetData());
}
<endif>
<if(message.hasCssSiteIdMember)>
int32_t <message.name>_Msg::cssSiteId(const void* pvMsgBase) const
{
    return reinterpret_cast\<const <message.name>*>(pvMsgBase)-><buildCssSiteIdPath(message)>;
}

int32_t <message.name>_Msg::cssSiteId(const CPOMsgEx& msgBase) const
{
    return cssSiteId(msgBase.GetData());
}
<endif>

<if(message.isEmptyMessage)>
size_t <message.name>_Msg::getRawDataHash(const void* /*pvData*/, size_t /*nDataLength*/)
{
    return std::hash\<std::string>()("<message.name>");
}
<else>
size_t <message.name>_Msg::getHash(const CPOMsgEx& msgBase) const
{
    return getRawDataHash(msgBase.GetData(), msgBase.GetDataLength());
}
size_t <message.name>_Msg::getRawDataHash(const void* pvData, size_t nDataLength)
{
    size_t uHash = std::hash\<std::string>()("<message.name>");
<if(message.hasVariableLengthArrayMember)>
    size_t nVariableArrayLength(0);
    if(nDataLength > sizeof(<message.name>))
    {
        nVariableArrayLength = nDataLength - sizeof(<message.name>);
        nVariableArrayLength /= sizeof(<message.variableLengthArrayMember.singleValueCppType>);
        ++nVariableArrayLength;
    }
<endif>
    const <message.name>& msgHash = *reinterpret_cast\<<message.name>*>(const_cast\<void*>(pvData));
    <message.members:{member|<addMemberToHash(member, "msgHash", "uHash", "std::", "nDataLength", "nVariableArrayLength")><\n>}>
    return uHash;
}
<endif>

#ifdef _INLINE_JSON_TEMPLATE
const std::string <message.name>_Msg::JSON_TEMPLATE = <generateInlineJSONTemplate(message)>;
const std::string <message.name>_Msg::JSON_UPDATE_TEMPLATE = <generateInlineJSONUpdateTemplate(message)>;
#endif

<if(message.isEmptyMessage)>
bool <message.name>_Msg::getFromJSON(CPOMsgExPtr_t& msgBase, const rapidjson::Value& jsonFrom) const
{
    cougar_messages::<getMessagePointerTypedef(message)> ptrMsg = getDirectFromRapidJSON(jsonFrom);
    msgBase = CPOMsgExPtr_t(new CPOMsgEx(<if(message.hasDefine)><message.define.name><else>-1<endif>, ptrMsg.get(), (WORD) messageSize(), 0), [](void* pvThis) { delete (CPOMsgEx*) pvThis; });
    return true;
}

cougar_messages::<getMessagePointerTypedef(message)> <message.name>_Msg::getDirectFromRapidJSON(const rapidjson::Value& /*jsonFrom*/)
{
    return cougar_messages::<getMessagePointerTypedef(message)>(new <message.name>());
}

<else>
std::string <message.name>_Msg::getAsJSON(const CPOMsgEx& msgBase, const std::string& strJSONTemplate, const std::string& strTimestamp, size_t nUID) const
{
    char szJSON[10000];
    std::memset(szJSON, 0, 10000);
    sprintf
    (
        szJSON,
        JSON_WRAPPER,
        (nUID == 0 ? getHash(msgBase) : nUID),
        getRawDataAsJSON(msgBase.GetData(), strJSONTemplate, msgBase.GetDataLength()).c_str(),
        strTimestamp.c_str(),
        <messageAsBase64Encoding(message, "msgBase.GetData()", "msgBase.GetDataLength()")>.c_str()
        );
    return std::string(szJSON);
}
std::string <message.name>_Msg::getRawDataAsJSON(const void* pvMsgData, const std::string& strJSONTemplate, size_t nDataLength)
{
    char szJSON[10000];
    std::memset(szJSON, 0, 10000);
    const <message.name>* pmsgJson = reinterpret_cast\<const <message.name>*>(pvMsgData);
    <message.fileTimeMembers:{member|SYSTEMTIME systime<member.name>;<\n>}>
    <message.fileTimeMembers:{member|convertFileTimeToSystemTime(pmsgJson-><member.name>, systime<member.name>);<\n>}>

    sprintf
        (
            szJSON,
            strJSONTemplate.c_str(),
            <message.members:{member|<memberAsJSON(message, member, "pmsgJson", true, "", "nDataLength", true)>}; separator = ",\n">
        );
    return std::string(szJSON);
}

bool <message.name>_Msg::getFromJSON(CPOMsgExPtr_t& msgBase, const rapidjson::Value& jsonFrom) const
{
    cougar_messages::<getMessagePointerTypedef(message)> ptrMsg = getDirectFromRapidJSON(jsonFrom);
    <if(message.hasVariableLengthArrayMember)>
    <if(message.variableLengthArrayMember.hasSizeMember)>
    msgBase = CPOMsgExPtr_t(new CPOMsgEx(<if(message.hasDefine)><message.define.name><else>-1<endif>, ptrMsg.get(), (WORD) messageSize(ptrMsg-><message.variableLengthArrayMember.sizeMember.name>), 0), [](void* pvThis) { delete (CPOMsgEx*) pvThis; });
    <else>
    WORD uVariableArraySize(0);
    for(rapidjson::Value::ConstValueIterator itJSON = jsonFrom["<message.variableLengthArrayMember.strippedName>"].Begin(); itJSON != jsonFrom["<message.variableLengthArrayMember.strippedName>"].End(); ++itJSON)
    {
        ++uVariableArraySize;
    }
    msgBase = CPOMsgExPtr_t(new CPOMsgEx(<if(message.hasDefine)><message.define.name><else>-1<endif>, ptrMsg.get(), (WORD) messageSize(uVariableArraySize), 0), [](void* pvThis) { delete (CPOMsgEx*) pvThis; });
    <endif>
    <else>
    msgBase = CPOMsgExPtr_t(new CPOMsgEx(<if(message.hasDefine)><message.define.name><else>-1<endif>, ptrMsg.get(), (WORD) messageSize(), 0), [](void* pvThis) { delete (CPOMsgEx*) pvThis; });
    <endif>
    return true;
}
cougar_messages::<getMessagePointerTypedef(message)> <message.name>_Msg::getDirectFromRapidJSON(const rapidjson::Value& jsonFrom)
{
    <message.arrayMembers:{member|<arrayFromJSON(message, member, "jsonFrom", "Rapid", true)>};separator="\n">
    return cougar_messages::build<message.plainName>(
        <message.members:{member|<localMemberForBuilder_RapidJSON(member, "jsonFrom")>};separator=",\n">
    );
}

bool <message.name>_Msg::valueUpdater(void* pvMsgContent, const rapidjson::Value& valJson, const char* pszName)
{
    <message.name>* pmsgRaw = reinterpret_cast\<<message.name>*>(pvMsgContent);
    <message.members:{member|<directMemberUpdateFromRapidJSON(member, "pmsgRaw->", "valJson")><\n>}>
    return true;
}

bool <message.name>_Msg::updateMessageFromTemplate(const CPOMsgExPtr_t& msgTemplate, CPOMsgExPtr_t& msgUpdated, const rapidjson::Value& jsonUpdate)
{
    cougar_messages::<getMessagePointerTypedef(message)> pmsgUpdated = cougar_messages::build<message.plainName>FromCopy(reinterpret_cast\<const <message.name>*>(msgTemplate->GetData()), msgTemplate->GetDataLength());
    <message.members:{member|<localMemberUpdateFromRapidJSON(member, "pmsgUpdated", "jsonUpdate")>}>
    <if(message.hasVariableLengthArrayMember)>
    msgUpdated = CPOMsgExPtr_t(new CPOMsgEx(<if(message.hasDefine)><message.define.name><else>-1<endif>, pmsgUpdated.get(), (WORD) msgTemplate->GetDataLength(), 0), [](void* pvThis) { delete (CPOMsgEx*) pvThis; });
    <else>
    msgUpdated = CPOMsgExPtr_t(new CPOMsgEx(<if(message.hasDefine)><message.define.name><else>-1<endif>, pmsgUpdated.get(), (WORD) messageSize(), 0), [](void* pvThis) { delete (CPOMsgEx*) pvThis; });
    <endif>
    return true;
}
<endif>
#ifdef _USING_MONGO
bool <message.name>_Msg::appendBSON(bsoncxx::builder::basic::sub_document& bsonBuilder, const CPOMsgEx& msgBase, size_t nUID) const
{
    FILETIME ftTimeStamp = {};
    msgBase.GetTimeStamp(&ftTimeStamp);
    int nSiteID(siteId(msgBase));
    int nCssSiteID(cssSiteId(msgBase));
    return appendBSON(bsonBuilder, ftTimeStamp, msgBase.GetPriorityLevel(), nSiteID, nCssSiteID, msgBase.GetData(), nUID, msgBase.GetDataLength());
}

bool <message.name>_Msg::appendBSON(bsoncxx::builder::basic::sub_document& bsonDoc, const FILETIME& ftTimeStamp, int nSiteID, int nCssSiteID, int nPriority, const void* pvMsgBase, size_t nUID, size_t nByteSize) const
{
<if(message.hasVariableLengthArrayMember)>
    size_t nVariableArraySize(nByteSize - sizeof(<message.name>));
    nVariableArraySize /= sizeof(<message.variableLengthArrayMember.singleValueCppType>);
    ++nVariableArraySize;
    return <message.name>_Msg::doAppendBSON(bsonDoc, ftTimeStamp, nSiteID, nCssSiteID, nPriority, pvMsgBase, nUID, nVariableArraySize);
<else>
    return <message.name>_Msg::doAppendBSON(bsonDoc, ftTimeStamp, nSiteID, nCssSiteID, nPriority, pvMsgBase, nUID, 0);
<endif>
}

bool <message.name>_Msg::fromBSON(const bsoncxx::document::view& bsonView, CPOMsgExPtr_t& msgTo, FILETIME& ftTimeStamp, int& nSiteID, int& nCssSiteID, int& nPriority) const
{
    MsgBuffer_t msgBuffer;
<if(message.hasVariableLengthArrayMember)>
    <if(message.variableLengthArrayMember.isString)>
    initialiseMessageBuffer(msgBuffer, bsonView["<message.variableLengthArrayMember.strippedName>"].get_string().value.size());
    <else>
    initialiseMessageBuffer(msgBuffer, static_cast\<bsoncxx::array::view>(bsonView["<message.variableLengthArrayMember.strippedName>"].get_array()).length());
    <endif>
<else>
    initialiseMessageBuffer(msgBuffer);
<endif>
    <message.name>* pmsgData = reinterpret_cast\<<message.name>*>(msgBuffer.data());
    int nMsgID(0);
    std::string strMsgName;
    <schema.schemaNamespace>::readFromBSONDocument(bsonView, ftTimeStamp, nSiteID, nCssSiteID, nPriority, nMsgID, strMsgName);
<if(message.isEmptyMessage)>
    msgTo = CPOMsgExPtr_t(new CPOMsgEx(<if(message.hasDefine)><message.define.name><else>-1<endif>, msgBuffer.data(), (WORD) msgBuffer.size(), (uint8_t) nPriority), [](void* pvThis) { delete (CPOMsgEx*) pvThis; });
    return true;
<else>
    if(doFromBSONDocument(bsonView, *pmsgData))
    {
        msgTo = CPOMsgExPtr_t(new CPOMsgEx(<if(message.hasDefine)><message.define.name><else>-1<endif>, msgBuffer.data(), (WORD) msgBuffer.size(), (uint8_t) nPriority), [](void* pvThis) { delete (CPOMsgEx*) pvThis; });
        return true;
    }
    return false;
<endif>
}
<if(message.isEmptyMessage)>
bool <message.name>_Msg::doAppendBSON(bsoncxx::builder::basic::sub_document& bsonDoc, const FILETIME& ftTimeStamp, int nSiteId, int nCssSiteId, int nPriority, const void* pvMsgBase, size_t nUID, size_t /*nVariableArraySize*/)
{
    if(nUID != 0)
    {
        bsonDoc.append(kvp("hash", bsoncxx::types::b_int64{static_cast\<int64_t>(nUID)}));
        bsonDoc.append(kvp
                    (
                        "msg",
                        [&bsonDoc, ftTimeStamp, nSiteId, nCssSiteId, nPriority, pvMsgBase](bsoncxx::builder::basic::sub_document subBsonDoc)
                        {
                            <schema.schemaNamespace>::appendBSONToDocument(bsonDoc, ftTimeStamp, nSiteId, nCssSiteId, nPriority, <if(message.hasDefine)><message.define.value><else>-1<endif>, "<message.define.name>");
                        }
                    )
               );
    }
    else
    {
        <schema.schemaNamespace>::appendBSONToDocument(bsonDoc, ftTimeStamp, nSiteId, nCssSiteId, nPriority, <if(message.hasDefine)><message.define.value><else>-1<endif>, "<message.define.name>");
    }

    return true;
}
<else>
bool <message.name>_Msg::doAppendBSON(bsoncxx::builder::basic::sub_document& bsonDoc, const FILETIME& ftTimeStamp, int nSiteId, int nCssSiteId, int nPriority, const void* pvMsgBase, size_t nUID, size_t nVariableArraySize)
{
    if(nUID != 0)
    {
        bsonDoc.append(kvp("hash", bsoncxx::types::b_int64{static_cast\<int64_t>(nUID)}));
        bsonDoc.append(kvp
                    (
                        "msg",
                        [&bsonDoc, ftTimeStamp, nSiteId, nCssSiteId, nPriority, pvMsgBase, nVariableArraySize](bsoncxx::builder::basic::sub_document subBsonDoc)
                        {
                            <schema.schemaNamespace>::appendBSONToDocument(bsonDoc, ftTimeStamp, nSiteId, nCssSiteId, nPriority, <if(message.hasDefine)><message.define.value><else>-1<endif>, "<message.define.name>");
                            doAppendBSONToDocument(subBsonDoc, pvMsgBase, nVariableArraySize);
                        }
                    )
               );
    }
    else
    {
        <schema.schemaNamespace>::appendBSONToDocument(bsonDoc, ftTimeStamp, nSiteId, nCssSiteId, nPriority, <if(message.hasDefine)><message.define.value><else>-1<endif>, "<message.define.name>");
        doAppendBSONToDocument(bsonDoc, pvMsgBase, nVariableArraySize);
    }

    return true;
}

bool <message.name>_Msg::doAppendBSONToDocument(bsoncxx::builder::basic::sub_document& bsonDoc, const void* pvMsgBase, size_t nVariableArraySize)
{
    const <message.name>* pmsgBson = reinterpret_cast\<const <message.name>*>(pvMsgBase);
    <message.members:{member|<memberAsBSON(message, member, "pmsgBson", true, "", "bsonDoc", "nVariableArraySize")>}>
    return true;
}

bool <message.name>_Msg::doFromBSONDocument(const bsoncxx::document::view& bsonView, <message.name>& msgBuffer)
{
    <message.members:{member|<memberFromBSON(message, member, "msgBuffer", "", "bsonView")>}>
    return true;
}

<endif>
#endif

<message.arrayMembers:{member|<defineArrayMemberToJSON(message, member)>}>

<message.arrayMembers:
{
    member|
<defineArrayMemberFromJSON(message, member, "rapidjson::Value", "jsonFrom", "Rapid")>
<defineArrayMemberFromJSONBody_RapidJSON(member, "jsonFrom")>
}>
>>

defineMessageHelperClass(message) ::= <<
<if(message.hasDefine)>
<defineHelperClass(message)>
<else>
<defineNonMessageImpl(message)>
<endif>
>>

addMessageHelperIncludes(schema) ::= <<
#include "<schema.helperHeaderName>"
#include "<schema.enumHelperHeaderName>"
#include "<schema.nonmessageHeaderName>"
#include "<schema.headerName>"
#include "<schema.builderHeaderName>"
#include \<cstring>
#include \<string>
#include \<fstream>
#include \<sstream>
#include \<rapidjson/document.h>
#ifdef _USING_MONGO
#include \<bsoncxx/builder/basic/kvp.hpp>
#include \<bsoncxx/types.hpp>
#endif

#ifdef _USING_MONGO
using bsoncxx::builder::basic::kvp;
#endif
>>

defineCougarMessageHelpers(schema, messages) ::= <<
// ****THIS IS A CODE GENERATED FILE DO NOT EDIT****
// Generated on <schema.generateDate>

<addMessageHelperIncludes(schema)>

extern const char* JSON_WRAPPER;

<messages:{message|<defineMessageHelperClass(message)>}>
>>

defineCougarMessageHelper(schema, message) ::= <<
// ****THIS IS A CODE GENERATED FILE DO NOT EDIT****
// Generated on <schema.generateDate>

<addMessageHelperIncludes(schema)>

<defineMessageHelperClass(message)>
>>


defineUnusedMessageHelperClass(message) ::= <<
<defineHelperClass(message)>
>>

defineUnusedCougarMessageHelpers(schema, messages) ::= <<
// ****THIS IS A CODE GENERATED FILE DO NOT EDIT****
// Generated on <schema.generateDate>

<addMessageHelperIncludes(schema)>

extern const char* JSON_WRAPPER;

namespace cougar_messages
{
    <messages:{message|<addDefineMessageBuilder(message)>};separator="\n">
    <messages:{message|<addDefineMessageCopy(message)>};separator="\n">
}

<messages:{message|<defineUnusedMessageHelperClass(message)>}>
>>

